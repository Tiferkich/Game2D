        -:    0:Source:C:/Program Files/JetBrains/CLion 2023.2.2/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/regex_compiler.tcc
        -:    0:Graph:C:\Users\sakhd\CLionProjects\gameLab3\cmake-build-debug\Tests\CMakeFiles\tests.dir\testing.cpp.gcno
        -:    0:Data:C:\Users\sakhd\CLionProjects\gameLab3\cmake-build-debug\Tests\CMakeFiles\tests.dir\testing.cpp.gcda
        -:    0:Runs:1
        -:    1:// class template regex -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2013-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/**
        -:   26: *  @file bits/regex_compiler.tcc
        -:   27: *  This is an internal header file, included by other library headers.
        -:   28: *  Do not attempt to use it directly. @headername{regex}
        -:   29: */
        -:   30:
        -:   31:// FIXME make comments doxygen format.
        -:   32:
        -:   33:/*
        -:   34:// This compiler refers to "Regular Expression Matching Can Be Simple And Fast"
        -:   35:// (http://swtch.com/~rsc/regexp/regexp1.html),
        -:   36:// but doesn't strictly follow it.
        -:   37://
        -:   38:// When compiling, states are *chained* instead of tree- or graph-constructed.
        -:   39:// It's more like structured programs: there's if statement and loop statement.
        -:   40://
        -:   41:// For alternative structure (say "a|b"), aka "if statement", two branches
        -:   42:// should be constructed. However, these two shall merge to an "end_tag" at
        -:   43:// the end of this operator:
        -:   44://
        -:   45://                branch1
        -:   46://              /        \
        -:   47:// => begin_tag            end_tag =>
        -:   48://              \        /
        -:   49://                branch2
        -:   50://
        -:   51:// This is the difference between this implementation and that in Russ's
        -:   52:// article.
        -:   53://
        -:   54:// That's why we introduced dummy node here ------ "end_tag" is a dummy node.
        -:   55:// All dummy nodes will be eliminated at the end of compilation.
        -:   56:*/
        -:   57:
        -:   58:namespace std _GLIBCXX_VISIBILITY(default)
        -:   59:{
        -:   60:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   61:
        -:   62:namespace __detail
        -:   63:{
        -:   64:  template<typename _TraitsT>
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEEC1EPKcS6_RKSt6localeNSt15regex_constants18syntax_option_typeE called 0 returned 0% blocks executed 0%
    #####:   65:    _Compiler<_TraitsT>::
        -:   66:    _Compiler(const _CharT* __b, const _CharT* __e,
        -:   67:	      const typename _TraitsT::locale_type& __loc, _FlagT __flags)
    #####:   68:    : _M_flags(_S_validate(__flags)),
    %%%%%:   68-block  0
call    0 never executed
    #####:   69:      _M_scanner(__b, __e, _M_flags, __loc),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   69-block  0
call    4 never executed
    $$$$$:   69-block  1
call    5 never executed
    $$$$$:   69-block  2
call    6 never executed
    #####:   70:      _M_nfa(make_shared<_RegexT>(__loc, _M_flags)),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   71:      _M_traits(_M_nfa->_M_traits),
    %%%%%:   71-block  0
call    0 never executed
    #####:   72:      _M_ctype(std::use_facet<_CtypeT>(__loc))
    %%%%%:   72-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -:   73:    {
    #####:   74:      _StateSeqT __r(*_M_nfa, _M_nfa->_M_start());
    %%%%%:   74-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   75:      __r._M_append(_M_nfa->_M_insert_subexpr_begin());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   75-block  0
call    4 never executed
    #####:   76:      this->_M_disjunction();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   77:      if (!_M_match_token(_ScannerT::_S_token_eof))
    %%%%%:   77-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   77-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:   78:	__throw_regex_error(regex_constants::error_paren);
    %%%%%:   78-block  0
call    0 never executed
    #####:   79:      __r._M_append(_M_pop());
    %%%%%:   79-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   79-block  1
call    3 never executed
    $$$$$:   79-block  2
    #####:   80:      __glibcxx_assert(_M_stack.empty());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:   80-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:   80-block  1
    %%%%%:   80-block  2
    %%%%%:   80-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:   80-block  4
call    8 never executed
    #####:   81:      __r._M_append(_M_nfa->_M_insert_subexpr_end());
    %%%%%:   81-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   81-block  1
call    4 never executed
    #####:   82:      __r._M_append(_M_nfa->_M_insert_accept());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:   82-block  0
call    4 never executed
    #####:   83:      _M_nfa->_M_eliminate_dummy();
call    0 never executed
call    1 never executed
    #####:   84:    }
    $$$$$:   84-block  0
call    0 never executed
    $$$$$:   84-block  1
call    1 never executed
    $$$$$:   84-block  2
call    2 never executed
    $$$$$:   84-block  3
call    3 never executed
        -:   85:
        -:   86:  template<typename _TraitsT>
        -:   87:    void
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE14_M_disjunctionEv called 0 returned 0% blocks executed 0%
    #####:   88:    _Compiler<_TraitsT>::
        -:   89:    _M_disjunction()
        -:   90:    {
    #####:   91:      this->_M_alternative();
    %%%%%:   91-block  0
call    0 never executed
    #####:   92:      while (_M_match_token(_ScannerT::_S_token_or))
    %%%%%:   92-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:   93:	{
    #####:   94:	  _StateSeqT __alt1 = _M_pop();
    %%%%%:   94-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   95:	  this->_M_alternative();
    %%%%%:   95-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   96:	  _StateSeqT __alt2 = _M_pop();
    %%%%%:   96-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   97:	  auto __end = _M_nfa->_M_insert_dummy();
    %%%%%:   97-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:   98:	  __alt1._M_append(__end);
    %%%%%:   98-block  0
call    0 never executed
    #####:   99:	  __alt2._M_append(__end);
call    0 never executed
        -:  100:	  // __alt2 is state._M_next, __alt1 is state._M_alt. The executor
        -:  101:	  // executes _M_alt before _M_next, as well as executing left
        -:  102:	  // alternative before right one.
    #####:  103:	  _M_stack.push(_StateSeqT(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  103-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  103-block  1
    $$$$$:  103-block  2
    #####:  104:				   _M_nfa->_M_insert_alt(
call    0 never executed
        -:  105:				     __alt2._M_start, __alt1._M_start, false),
        -:  106:				   __end));
        -:  107:	}
    #####:  108:    }
    %%%%%:  108-block  0
        -:  109:
        -:  110:  template<typename _TraitsT>
        -:  111:    void
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE14_M_alternativeEv called 0 returned 0% blocks executed 0%
    #####:  112:    _Compiler<_TraitsT>::
        -:  113:    _M_alternative()
        -:  114:    {
    #####:  115:      if (this->_M_term())
    %%%%%:  115-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  116:	{
    #####:  117:	  _StateSeqT __re = _M_pop();
    %%%%%:  117-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  118:	  this->_M_alternative();
    %%%%%:  118-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  119:	  __re._M_append(_M_pop());
    %%%%%:  119-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  119-block  1
call    3 never executed
    $$$$$:  119-block  2
    #####:  120:	  _M_stack.push(__re);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  121:	}
        -:  122:      else
    #####:  123:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_dummy()));
    %%%%%:  123-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  123-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  123-block  2
    #####:  124:    }
    %%%%%:  124-block  0
        -:  125:
        -:  126:  template<typename _TraitsT>
        -:  127:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE7_M_termEv called 0 returned 0% blocks executed 0%
    #####:  128:    _Compiler<_TraitsT>::
        -:  129:    _M_term()
        -:  130:    {
    #####:  131:      if (this->_M_assertion())
    %%%%%:  131-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  132:	return true;
    %%%%%:  132-block  0
    #####:  133:      if (this->_M_atom())
    %%%%%:  133-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  134:	{
    #####:  135:	  while (this->_M_quantifier())
    %%%%%:  135-block  0
    %%%%%:  135-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  136:	    ;
    #####:  137:	  return true;
    %%%%%:  137-block  0
        -:  138:	}
    #####:  139:      return false;
    %%%%%:  139-block  0
        -:  140:    }
        -:  141:
        -:  142:  template<typename _TraitsT>
        -:  143:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE12_M_assertionEv called 0 returned 0% blocks executed 0%
    #####:  144:    _Compiler<_TraitsT>::
        -:  145:    _M_assertion()
        -:  146:    {
    #####:  147:      if (_M_match_token(_ScannerT::_S_token_line_begin))
    %%%%%:  147-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  148:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_line_begin()));
    %%%%%:  148-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  148-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  148-block  2
    $$$$$:  148-block  3
call    9 never executed
    #####:  149:      else if (_M_match_token(_ScannerT::_S_token_line_end))
    %%%%%:  149-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  150:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_line_end()));
    %%%%%:  150-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  150-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  150-block  2
    $$$$$:  150-block  3
call    9 never executed
    #####:  151:      else if (_M_match_token(_ScannerT::_S_token_word_bound))
    %%%%%:  151-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  152:	// _M_value[0] == 'n' means it's negative, say "not word boundary".
    #####:  153:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->
    %%%%%:  153-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  153-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  153-block  2
    $$$$$:  153-block  3
call    9 never executed
    #####:  154:	      _M_insert_word_bound(_M_value[0] == 'n')));
call    0 never executed
    #####:  155:      else if (_M_match_token(_ScannerT::_S_token_subexpr_lookahead_begin))
    %%%%%:  155-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  156:	{
    #####:  157:	  auto __neg = _M_value[0] == 'n';
    %%%%%:  157-block  0
call    0 never executed
    #####:  158:	  this->_M_disjunction();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  159:	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
    %%%%%:  159-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  159-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  160:	    __throw_regex_error(regex_constants::error_paren);
    %%%%%:  160-block  0
call    0 never executed
    #####:  161:	  auto __tmp = _M_pop();
    %%%%%:  161-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  162:	  __tmp._M_append(_M_nfa->_M_insert_accept());
    %%%%%:  162-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  162-block  1
call    4 never executed
    #####:  163:	  _M_stack.push(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  164:	      _StateSeqT(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    %%%%%:  164-block  0
    $$$$$:  164-block  1
    #####:  165:		*_M_nfa,
    %%%%%:  165-block  0
call    0 never executed
    #####:  166:		_M_nfa->_M_insert_lookahead(__tmp._M_start, __neg)));
call    0 never executed
        -:  167:	}
        -:  168:      else
    #####:  169:	return false;
    %%%%%:  169-block  0
    #####:  170:      return true;
    %%%%%:  170-block  0
        -:  171:    }
        -:  172:
        -:  173:  template<typename _TraitsT>
        -:  174:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE13_M_quantifierEv called 0 returned 0% blocks executed 0%
    #####:  175:    _Compiler<_TraitsT>::
        -:  176:    _M_quantifier()
        -:  177:    {
    #####:  178:      bool __neg = (_M_flags & regex_constants::ECMAScript);
    %%%%%:  178-block  0
call    0 never executed
function _ZZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE13_M_quantifierEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  179:      auto __init = [this, &__neg]()
        -:  180:	{
    #####:  181:	  if (_M_stack.empty())
    %%%%%:  181-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  182:	    __throw_regex_error(regex_constants::error_badrepeat);
    %%%%%:  182-block  0
call    0 never executed
    #####:  183:	  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);
    %%%%%:  183-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  183-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  183-block  2
    %%%%%:  183-block  3
        -:  184:	};
    #####:  185:      if (_M_match_token(_ScannerT::_S_token_closure0))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  185-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  186:	{
    #####:  187:	  __init();
    %%%%%:  187-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  188:	  auto __e = _M_pop();
    %%%%%:  188-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  189:	  _StateSeqT __r(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  189-block  0
call    3 never executed
call    4 never executed
    #####:  190:			 _M_nfa->_M_insert_repeat(_S_invalid_state_id,
    %%%%%:  190-block  0
call    0 never executed
        -:  191:						  __e._M_start, __neg));
    #####:  192:	  __e._M_append(__r);
call    0 never executed
    #####:  193:	  _M_stack.push(__r);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  194:	}
    #####:  195:      else if (_M_match_token(_ScannerT::_S_token_closure1))
    %%%%%:  195-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  195-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  196:	{
    #####:  197:	  __init();
    %%%%%:  197-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  198:	  auto __e = _M_pop();
    %%%%%:  198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  199:	  __e._M_append(_M_nfa->_M_insert_repeat(_S_invalid_state_id,
    %%%%%:  199-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  199-block  1
call    4 never executed
        -:  200:						 __e._M_start, __neg));
    #####:  201:	  _M_stack.push(__e);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  202:	}
    #####:  203:      else if (_M_match_token(_ScannerT::_S_token_opt))
    %%%%%:  203-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  203-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  204:	{
    #####:  205:	  __init();
    %%%%%:  205-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  206:	  auto __e = _M_pop();
    %%%%%:  206-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  207:	  auto __end = _M_nfa->_M_insert_dummy();
    %%%%%:  207-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  208:	  _StateSeqT __r(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  208-block  0
call    3 never executed
call    4 never executed
    #####:  209:			 _M_nfa->_M_insert_repeat(_S_invalid_state_id,
    %%%%%:  209-block  0
call    0 never executed
        -:  210:						  __e._M_start, __neg));
    #####:  211:	  __e._M_append(__end);
call    0 never executed
    #####:  212:	  __r._M_append(__end);
call    0 never executed
    #####:  213:	  _M_stack.push(__r);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  214:	}
    #####:  215:      else if (_M_match_token(_ScannerT::_S_token_interval_begin))
    %%%%%:  215-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  215-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  216:	{
    #####:  217:	  if (_M_stack.empty())
    %%%%%:  217-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  218:	    __throw_regex_error(regex_constants::error_badrepeat);
    %%%%%:  218-block  0
call    0 never executed
    #####:  219:	  if (!_M_match_token(_ScannerT::_S_token_dup_count))
    %%%%%:  219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  219-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  220:	    __throw_regex_error(regex_constants::error_badbrace);
    %%%%%:  220-block  0
call    0 never executed
    #####:  221:	  _StateSeqT __r(_M_pop());
    %%%%%:  221-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  222:	  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());
    %%%%%:  222-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  222-block  1
call    4 never executed
call    5 never executed
    #####:  223:	  long __min_rep = _M_cur_int_value(10);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  224:	  bool __infi = false;
    #####:  225:	  long __n = 0;
        -:  226:
        -:  227:	  // {3
    #####:  228:	  if (_M_match_token(_ScannerT::_S_token_comma))
    %%%%%:  228-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  228-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  229:	    {
    #####:  230:	      if (_M_match_token(_ScannerT::_S_token_dup_count)) // {3,7}
    %%%%%:  230-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  230-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  231:		__n = _M_cur_int_value(10) - __min_rep;
    %%%%%:  231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  231-block  1
        -:  232:	      else
    #####:  233:		__infi = true;
    %%%%%:  233-block  0
        -:  234:	    }
    #####:  235:	  if (!_M_match_token(_ScannerT::_S_token_interval_end))
    %%%%%:  235-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  235-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  236:	    __throw_regex_error(regex_constants::error_brace);
    %%%%%:  236-block  0
call    0 never executed
        -:  237:
    #####:  238:	  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);
    %%%%%:  238-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  238-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  238-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  238-block  3
    %%%%%:  238-block  4
        -:  239:
    #####:  240:	  for (long __i = 0; __i < __min_rep; ++__i)
    %%%%%:  240-block  0
    %%%%%:  240-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  241:	    __e._M_append(__r._M_clone());
    %%%%%:  241-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  241-block  1
call    3 never executed
    $$$$$:  241-block  2
        -:  242:
    #####:  243:	  if (__infi)
    %%%%%:  243-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  244:	    {
    #####:  245:	      auto __tmp = __r._M_clone();
    %%%%%:  245-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  246:	      _StateSeqT __s(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  246-block  0
call    3 never executed
call    4 never executed
    #####:  247:			     _M_nfa->_M_insert_repeat(_S_invalid_state_id,
    %%%%%:  247-block  0
call    0 never executed
        -:  248:						      __tmp._M_start, __neg));
    #####:  249:	      __tmp._M_append(__s);
call    0 never executed
    #####:  250:	      __e._M_append(__s);
call    0 never executed
        -:  251:	    }
        -:  252:	  else
        -:  253:	    {
    #####:  254:	      if (__n < 0)
    %%%%%:  254-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  255:		__throw_regex_error(regex_constants::error_badbrace);
    %%%%%:  255-block  0
call    0 never executed
    #####:  256:	      auto __end = _M_nfa->_M_insert_dummy();
    %%%%%:  256-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  257:	      // _M_alt is the "match more" branch, and _M_next is the
        -:  258:	      // "match less" one. Switch _M_alt and _M_next of all created
        -:  259:	      // nodes. This is a hack but IMO works well.
    #####:  260:	      std::stack<_StateIdT> __stack;
    %%%%%:  260-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  261:	      for (long __i = 0; __i < __n; ++__i)
    %%%%%:  261-block  0
    %%%%%:  261-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  262:		{
    #####:  263:		  auto __tmp = __r._M_clone();
    %%%%%:  263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  264:		  auto __alt = _M_nfa->_M_insert_repeat(__tmp._M_start,
    %%%%%:  264-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  265:							__end, __neg);
    #####:  266:		  __stack.push(__alt);
    %%%%%:  266-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  267:		  __e._M_append(_StateSeqT(*_M_nfa, __alt, __tmp._M_end));
    %%%%%:  267-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  268:		}
    #####:  269:	      __e._M_append(__end);
    %%%%%:  269-block  0
call    0 never executed
    #####:  270:	      while (!__stack.empty())
    %%%%%:  270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  271:		{
    #####:  272:		  auto& __tmp = (*_M_nfa)[__stack.top()];
    %%%%%:  272-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  273:		  __stack.pop();
call    0 never executed
    #####:  274:		  std::swap(__tmp._M_next, __tmp._M_alt);
call    0 never executed
        -:  275:		}
    #####:  276:	    }
    %%%%%:  276-block  0
call    0 never executed
    $$$$$:  276-block  1
call    1 never executed
    #####:  277:	  _M_stack.push(__e);
    %%%%%:  277-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  278:	}
        -:  279:      else
    #####:  280:	return false;
    %%%%%:  280-block  0
    #####:  281:      return true;
    %%%%%:  281-block  0
        -:  282:    }
        -:  283:
        -:  284:#define __INSERT_REGEX_MATCHER(__func, ...)\
        -:  285:	do {\
        -:  286:	  if (!(_M_flags & regex_constants::icase))\
        -:  287:	    if (!(_M_flags & regex_constants::collate))\
        -:  288:	      __func<false, false>(__VA_ARGS__);\
        -:  289:	    else\
        -:  290:	      __func<false, true>(__VA_ARGS__);\
        -:  291:	  else\
        -:  292:	    if (!(_M_flags & regex_constants::collate))\
        -:  293:	      __func<true, false>(__VA_ARGS__);\
        -:  294:	    else\
        -:  295:	      __func<true, true>(__VA_ARGS__);\
        -:  296:	} while (false)
        -:  297:
        -:  298:  template<typename _TraitsT>
        -:  299:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE7_M_atomEv called 0 returned 0% blocks executed 0%
    #####:  300:    _Compiler<_TraitsT>::
        -:  301:    _M_atom()
        -:  302:    {
    #####:  303:      if (_M_match_token(_ScannerT::_S_token_anychar))
    %%%%%:  303-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  304:	{
    #####:  305:	  if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  305-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  306:	    __INSERT_REGEX_MATCHER(_M_insert_any_matcher_posix);
    %%%%%:  306-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  306-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  306-block  2
call    6 never executed
    %%%%%:  306-block  3
call    7 never executed
    %%%%%:  306-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%:  306-block  5
call   11 never executed
    %%%%%:  306-block  6
call   12 never executed
        -:  307:	  else
    #####:  308:	    __INSERT_REGEX_MATCHER(_M_insert_any_matcher_ecma);
    %%%%%:  308-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  308-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  308-block  2
call    6 never executed
    %%%%%:  308-block  3
call    7 never executed
    %%%%%:  308-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%:  308-block  5
call   11 never executed
    %%%%%:  308-block  6
call   12 never executed
        -:  309:	}
    #####:  310:      else if (_M_try_char())
    %%%%%:  310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  311:	__INSERT_REGEX_MATCHER(_M_insert_char_matcher);
    %%%%%:  311-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  311-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  311-block  2
call    6 never executed
    %%%%%:  311-block  3
call    7 never executed
    %%%%%:  311-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%:  311-block  5
call   11 never executed
    %%%%%:  311-block  6
call   12 never executed
    #####:  312:      else if (_M_match_token(_ScannerT::_S_token_backref))
    %%%%%:  312-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  313:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->
    %%%%%:  313-block  0
call    0 never executed
    %%%%%:  313-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  313-block  2
    $$$$$:  313-block  3
call    6 never executed
    #####:  314:				 _M_insert_backref(_M_cur_int_value(10))));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  314-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  315:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  315-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  316:	__INSERT_REGEX_MATCHER(_M_insert_character_class_matcher);
    %%%%%:  316-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  316-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  316-block  2
call    6 never executed
    %%%%%:  316-block  3
call    7 never executed
    %%%%%:  316-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%:  316-block  5
call   11 never executed
    %%%%%:  316-block  6
call   12 never executed
    #####:  317:      else if (_M_match_token(_ScannerT::_S_token_subexpr_no_group_begin))
    %%%%%:  317-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  318:	{
    #####:  319:	  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_dummy());
    %%%%%:  319-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  319-block  1
call    4 never executed
call    5 never executed
    #####:  320:	  this->_M_disjunction();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  321:	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
    %%%%%:  321-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  321-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  322:	    __throw_regex_error(regex_constants::error_paren);
    %%%%%:  322-block  0
call    0 never executed
    #####:  323:	  __r._M_append(_M_pop());
    %%%%%:  323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  323-block  1
call    3 never executed
    $$$$$:  323-block  2
    #####:  324:	  _M_stack.push(__r);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  325:	}
    #####:  326:      else if (_M_match_token(_ScannerT::_S_token_subexpr_begin))
    %%%%%:  326-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  327:	{
    #####:  328:	  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_subexpr_begin());
    %%%%%:  328-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  328-block  1
call    4 never executed
call    5 never executed
    #####:  329:	  this->_M_disjunction();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  330:	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
    %%%%%:  330-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  330-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  331:	    __throw_regex_error(regex_constants::error_paren);
    %%%%%:  331-block  0
call    0 never executed
    #####:  332:	  __r._M_append(_M_pop());
    %%%%%:  332-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  332-block  1
call    3 never executed
    $$$$$:  332-block  2
    #####:  333:	  __r._M_append(_M_nfa->_M_insert_subexpr_end());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  333-block  0
call    4 never executed
    #####:  334:	  _M_stack.push(__r);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  335:	}
    #####:  336:      else if (!_M_bracket_expression())
    %%%%%:  336-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  337:	return false;
    %%%%%:  337-block  0
    #####:  338:      return true;
    %%%%%:  338-block  0
        -:  339:    }
        -:  340:
        -:  341:  template<typename _TraitsT>
        -:  342:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE21_M_bracket_expressionEv called 0 returned 0% blocks executed 0%
    #####:  343:    _Compiler<_TraitsT>::
        -:  344:    _M_bracket_expression()
        -:  345:    {
        -:  346:      bool __neg =
    #####:  347:	_M_match_token(_ScannerT::_S_token_bracket_neg_begin);
    %%%%%:  347-block  0
call    0 never executed
    #####:  348:      if (!(__neg || _M_match_token(_ScannerT::_S_token_bracket_begin)))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  348-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  348-block  1
    %%%%%:  348-block  2
    %%%%%:  348-block  3
branch  5 never executed (fallthrough)
branch  6 never executed
    #####:  349:	return false;
    %%%%%:  349-block  0
    #####:  350:      __INSERT_REGEX_MATCHER(_M_insert_bracket_matcher, __neg);
    %%%%%:  350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  350-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  350-block  2
call    6 never executed
    %%%%%:  350-block  3
call    7 never executed
    %%%%%:  350-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%:  350-block  5
call   11 never executed
    %%%%%:  350-block  6
call   12 never executed
    #####:  351:      return true;
    %%%%%:  351-block  0
        -:  352:    }
        -:  353:#undef __INSERT_REGEX_MATCHER
        -:  354:
        -:  355:  template<typename _TraitsT>
        -:  356:  template<bool __icase, bool __collate>
        -:  357:    void
    #####:  358:    _Compiler<_TraitsT>::
        -:  359:    _M_insert_any_matcher_ecma()
        -:  360:    {
    #####:  361:      _M_stack.push(_StateSeqT(*_M_nfa,
    #####:  362:	_M_nfa->_M_insert_matcher
    #####:  363:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
        -:  364:	    (_M_traits))));
    #####:  365:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb1ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb1ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  358:    _Compiler<_TraitsT>::
        -:  359:    _M_insert_any_matcher_ecma()
        -:  360:    {
    #####:  361:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  361-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  361-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  361-block  2
call    9 never executed
    $$$$$:  361-block  3
call   10 never executed
    $$$$$:  361-block  4
    #####:  362:	_M_nfa->_M_insert_matcher
    %%%%%:  362-block  0
call    0 never executed
    #####:  363:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  363-block  0
        -:  364:	    (_M_traits))));
    #####:  365:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb1ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb1ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  358:    _Compiler<_TraitsT>::
        -:  359:    _M_insert_any_matcher_ecma()
        -:  360:    {
    #####:  361:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  361-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  361-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  361-block  2
call    9 never executed
    $$$$$:  361-block  3
call   10 never executed
    $$$$$:  361-block  4
    #####:  362:	_M_nfa->_M_insert_matcher
    %%%%%:  362-block  0
call    0 never executed
    #####:  363:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  363-block  0
        -:  364:	    (_M_traits))));
    #####:  365:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb0ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb0ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  358:    _Compiler<_TraitsT>::
        -:  359:    _M_insert_any_matcher_ecma()
        -:  360:    {
    #####:  361:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  361-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  361-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  361-block  2
call    9 never executed
    $$$$$:  361-block  3
call   10 never executed
    $$$$$:  361-block  4
    #####:  362:	_M_nfa->_M_insert_matcher
    %%%%%:  362-block  0
call    0 never executed
    #####:  363:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  363-block  0
        -:  364:	    (_M_traits))));
    #####:  365:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb0ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb0ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  358:    _Compiler<_TraitsT>::
        -:  359:    _M_insert_any_matcher_ecma()
        -:  360:    {
    #####:  361:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  361-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  361-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  361-block  2
call    9 never executed
    $$$$$:  361-block  3
call   10 never executed
    $$$$$:  361-block  4
    #####:  362:	_M_nfa->_M_insert_matcher
    %%%%%:  362-block  0
call    0 never executed
    #####:  363:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  363-block  0
        -:  364:	    (_M_traits))));
    #####:  365:    }
------------------
        -:  366:
        -:  367:  template<typename _TraitsT>
        -:  368:  template<bool __icase, bool __collate>
        -:  369:    void
    #####:  370:    _Compiler<_TraitsT>::
        -:  371:    _M_insert_any_matcher_posix()
        -:  372:    {
    #####:  373:      _M_stack.push(_StateSeqT(*_M_nfa,
    #####:  374:	_M_nfa->_M_insert_matcher
    #####:  375:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
        -:  376:	    (_M_traits))));
    #####:  377:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb1ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb1ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  370:    _Compiler<_TraitsT>::
        -:  371:    _M_insert_any_matcher_posix()
        -:  372:    {
    #####:  373:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  373-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  373-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  373-block  2
call    9 never executed
    $$$$$:  373-block  3
call   10 never executed
    $$$$$:  373-block  4
    #####:  374:	_M_nfa->_M_insert_matcher
    %%%%%:  374-block  0
call    0 never executed
    #####:  375:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  375-block  0
        -:  376:	    (_M_traits))));
    #####:  377:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb1ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb1ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  370:    _Compiler<_TraitsT>::
        -:  371:    _M_insert_any_matcher_posix()
        -:  372:    {
    #####:  373:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  373-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  373-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  373-block  2
call    9 never executed
    $$$$$:  373-block  3
call   10 never executed
    $$$$$:  373-block  4
    #####:  374:	_M_nfa->_M_insert_matcher
    %%%%%:  374-block  0
call    0 never executed
    #####:  375:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  375-block  0
        -:  376:	    (_M_traits))));
    #####:  377:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb0ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb0ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  370:    _Compiler<_TraitsT>::
        -:  371:    _M_insert_any_matcher_posix()
        -:  372:    {
    #####:  373:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  373-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  373-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  373-block  2
call    9 never executed
    $$$$$:  373-block  3
call   10 never executed
    $$$$$:  373-block  4
    #####:  374:	_M_nfa->_M_insert_matcher
    %%%%%:  374-block  0
call    0 never executed
    #####:  375:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  375-block  0
        -:  376:	    (_M_traits))));
    #####:  377:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb0ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb0ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  370:    _Compiler<_TraitsT>::
        -:  371:    _M_insert_any_matcher_posix()
        -:  372:    {
    #####:  373:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  373-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  373-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  373-block  2
call    9 never executed
    $$$$$:  373-block  3
call   10 never executed
    $$$$$:  373-block  4
    #####:  374:	_M_nfa->_M_insert_matcher
    %%%%%:  374-block  0
call    0 never executed
    #####:  375:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  375-block  0
        -:  376:	    (_M_traits))));
    #####:  377:    }
------------------
        -:  378:
        -:  379:  template<typename _TraitsT>
        -:  380:  template<bool __icase, bool __collate>
        -:  381:    void
    #####:  382:    _Compiler<_TraitsT>::
        -:  383:    _M_insert_char_matcher()
        -:  384:    {
    #####:  385:      _M_stack.push(_StateSeqT(*_M_nfa,
    #####:  386:	_M_nfa->_M_insert_matcher
    #####:  387:	  (_CharMatcher<_TraitsT, __icase, __collate>
    #####:  388:	    (_M_value[0], _M_traits))));
    #####:  389:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb1ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb1ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  382:    _Compiler<_TraitsT>::
        -:  383:    _M_insert_char_matcher()
        -:  384:    {
    #####:  385:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  385-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  385-block  2
call    9 never executed
    $$$$$:  385-block  3
call   10 never executed
    $$$$$:  385-block  4
    #####:  386:	_M_nfa->_M_insert_matcher
    %%%%%:  386-block  0
call    0 never executed
    #####:  387:	  (_CharMatcher<_TraitsT, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  387-block  0
    #####:  388:	    (_M_value[0], _M_traits))));
call    0 never executed
    #####:  389:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb1ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb1ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  382:    _Compiler<_TraitsT>::
        -:  383:    _M_insert_char_matcher()
        -:  384:    {
    #####:  385:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  385-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  385-block  2
call    9 never executed
    $$$$$:  385-block  3
call   10 never executed
    $$$$$:  385-block  4
    #####:  386:	_M_nfa->_M_insert_matcher
    %%%%%:  386-block  0
call    0 never executed
    #####:  387:	  (_CharMatcher<_TraitsT, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  387-block  0
    #####:  388:	    (_M_value[0], _M_traits))));
call    0 never executed
    #####:  389:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb0ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb0ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  382:    _Compiler<_TraitsT>::
        -:  383:    _M_insert_char_matcher()
        -:  384:    {
    #####:  385:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  385-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  385-block  2
call    9 never executed
    $$$$$:  385-block  3
call   10 never executed
    $$$$$:  385-block  4
    #####:  386:	_M_nfa->_M_insert_matcher
    %%%%%:  386-block  0
call    0 never executed
    #####:  387:	  (_CharMatcher<_TraitsT, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  387-block  0
    #####:  388:	    (_M_value[0], _M_traits))));
call    0 never executed
    #####:  389:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb0ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb0ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  382:    _Compiler<_TraitsT>::
        -:  383:    _M_insert_char_matcher()
        -:  384:    {
    #####:  385:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  385-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  385-block  2
call    9 never executed
    $$$$$:  385-block  3
call   10 never executed
    $$$$$:  385-block  4
    #####:  386:	_M_nfa->_M_insert_matcher
    %%%%%:  386-block  0
call    0 never executed
    #####:  387:	  (_CharMatcher<_TraitsT, __icase, __collate>
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$:  387-block  0
    #####:  388:	    (_M_value[0], _M_traits))));
call    0 never executed
    #####:  389:    }
------------------
        -:  390:
        -:  391:  template<typename _TraitsT>
        -:  392:  template<bool __icase, bool __collate>
        -:  393:    void
    #####:  394:    _Compiler<_TraitsT>::
        -:  395:    _M_insert_character_class_matcher()
        -:  396:    {
    #####:  397:      __glibcxx_assert(_M_value.size() == 1);
    #####:  398:      _BracketMatcher<__icase, __collate> __matcher
    #####:  399:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    #####:  400:      __matcher._M_add_character_class(_M_value, false);
    #####:  401:      __matcher._M_ready();
    #####:  402:      _M_stack.push(_StateSeqT(*_M_nfa,
    #####:  403:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    #####:  404:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb1ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb1ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  394:    _Compiler<_TraitsT>::
        -:  395:    _M_insert_character_class_matcher()
        -:  396:    {
    #####:  397:      __glibcxx_assert(_M_value.size() == 1);
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  397-block  2
    %%%%%:  397-block  3
    %%%%%:  397-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  397-block  5
call    8 never executed
    #####:  398:      _BracketMatcher<__icase, __collate> __matcher
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  399:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
    #####:  400:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  401:      __matcher._M_ready();
    %%%%%:  401-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  402:      _M_stack.push(_StateSeqT(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  402-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  402-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  402-block  2
call   11 never executed
    $$$$$:  402-block  3
call   12 never executed
    $$$$$:  402-block  4
    $$$$$:  402-block  5
    #####:  403:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  403-block  0
call    0 never executed
call    1 never executed
    #####:  404:    }
call    0 never executed
    $$$$$:  404-block  0
call    1 never executed
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb1ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb1ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  394:    _Compiler<_TraitsT>::
        -:  395:    _M_insert_character_class_matcher()
        -:  396:    {
    #####:  397:      __glibcxx_assert(_M_value.size() == 1);
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  397-block  2
    %%%%%:  397-block  3
    %%%%%:  397-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  397-block  5
call    8 never executed
    #####:  398:      _BracketMatcher<__icase, __collate> __matcher
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  399:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
    #####:  400:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  401:      __matcher._M_ready();
    %%%%%:  401-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  402:      _M_stack.push(_StateSeqT(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  402-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  402-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  402-block  2
call   11 never executed
    $$$$$:  402-block  3
call   12 never executed
    $$$$$:  402-block  4
    $$$$$:  402-block  5
    #####:  403:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  403-block  0
call    0 never executed
call    1 never executed
    #####:  404:    }
call    0 never executed
    $$$$$:  404-block  0
call    1 never executed
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb0ELb1EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb0ELb1EEEvv called 0 returned 0% blocks executed 0%
    #####:  394:    _Compiler<_TraitsT>::
        -:  395:    _M_insert_character_class_matcher()
        -:  396:    {
    #####:  397:      __glibcxx_assert(_M_value.size() == 1);
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  397-block  2
    %%%%%:  397-block  3
    %%%%%:  397-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  397-block  5
call    8 never executed
    #####:  398:      _BracketMatcher<__icase, __collate> __matcher
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  399:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
    #####:  400:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  401:      __matcher._M_ready();
    %%%%%:  401-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  402:      _M_stack.push(_StateSeqT(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  402-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  402-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  402-block  2
call   11 never executed
    $$$$$:  402-block  3
call   12 never executed
    $$$$$:  402-block  4
    $$$$$:  402-block  5
    #####:  403:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  403-block  0
call    0 never executed
call    1 never executed
    #####:  404:    }
call    0 never executed
    $$$$$:  404-block  0
call    1 never executed
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb0ELb0EEEvv:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb0ELb0EEEvv called 0 returned 0% blocks executed 0%
    #####:  394:    _Compiler<_TraitsT>::
        -:  395:    _M_insert_character_class_matcher()
        -:  396:    {
    #####:  397:      __glibcxx_assert(_M_value.size() == 1);
    %%%%%:  397-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  397-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  397-block  2
    %%%%%:  397-block  3
    %%%%%:  397-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  397-block  5
call    8 never executed
    #####:  398:      _BracketMatcher<__icase, __collate> __matcher
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  399:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
    #####:  400:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  401:      __matcher._M_ready();
    %%%%%:  401-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  402:      _M_stack.push(_StateSeqT(*_M_nfa,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  402-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  402-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  402-block  2
call   11 never executed
    $$$$$:  402-block  3
call   12 never executed
    $$$$$:  402-block  4
    $$$$$:  402-block  5
    #####:  403:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  403-block  0
call    0 never executed
call    1 never executed
    #####:  404:    }
call    0 never executed
    $$$$$:  404-block  0
call    1 never executed
------------------
        -:  405:
        -:  406:  template<typename _TraitsT>
        -:  407:  template<bool __icase, bool __collate>
        -:  408:    void
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_bracket_matcher(bool __neg)
        -:  411:    {
    #####:  412:      _BracketMatcher<__icase, __collate> __matcher(__neg, _M_traits);
    #####:  413:      _BracketState __last_char;
    #####:  414:      if (_M_try_char())
    #####:  415:	__last_char.set(_M_value[0]);
    #####:  416:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
        -:  417:	// Dash as first character is a normal character.
    #####:  418:	__last_char.set('-');
    #####:  419:      while (_M_expression_term(__last_char, __matcher))
        -:  420:	;
    #####:  421:      if (__last_char._M_is_char())
    #####:  422:	__matcher._M_add_char(__last_char.get());
    #####:  423:      __matcher._M_ready();
    #####:  424:      _M_stack.push(_StateSeqT(
    #####:  425:		      *_M_nfa,
    #####:  426:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    #####:  427:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb1ELb1EEEvb:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb1ELb1EEEvb called 0 returned 0% blocks executed 0%
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_bracket_matcher(bool __neg)
        -:  411:    {
    #####:  412:      _BracketMatcher<__icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  412-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  413:      _BracketState __last_char;
    #####:  414:      if (_M_try_char())
    %%%%%:  414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  414-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  415:	__last_char.set(_M_value[0]);
    %%%%%:  415-block  0
call    0 never executed
call    1 never executed
    #####:  416:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  416-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  417:	// Dash as first character is a normal character.
    #####:  418:	__last_char.set('-');
    %%%%%:  418-block  0
call    0 never executed
    #####:  419:      while (_M_expression_term(__last_char, __matcher))
    %%%%%:  419-block  0
    %%%%%:  419-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  419-block  2
branch  3 never executed
branch  4 never executed (fallthrough)
        -:  420:	;
    #####:  421:      if (__last_char._M_is_char())
    %%%%%:  421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  422:	__matcher._M_add_char(__last_char.get());
    %%%%%:  422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  423:      __matcher._M_ready();
    %%%%%:  423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  424:      _M_stack.push(_StateSeqT(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  424-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  424-block  1
call   10 never executed
    $$$$$:  424-block  2
call   11 never executed
    $$$$$:  424-block  3
    $$$$$:  424-block  4
    #####:  425:		      *_M_nfa,
    %%%%%:  425-block  0
call    0 never executed
    #####:  426:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  426-block  0
call    0 never executed
call    1 never executed
    #####:  427:    }
call    0 never executed
    $$$$$:  427-block  0
call    1 never executed
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb1ELb0EEEvb:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb1ELb0EEEvb called 0 returned 0% blocks executed 0%
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_bracket_matcher(bool __neg)
        -:  411:    {
    #####:  412:      _BracketMatcher<__icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  412-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  413:      _BracketState __last_char;
    #####:  414:      if (_M_try_char())
    %%%%%:  414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  414-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  415:	__last_char.set(_M_value[0]);
    %%%%%:  415-block  0
call    0 never executed
call    1 never executed
    #####:  416:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  416-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  417:	// Dash as first character is a normal character.
    #####:  418:	__last_char.set('-');
    %%%%%:  418-block  0
call    0 never executed
    #####:  419:      while (_M_expression_term(__last_char, __matcher))
    %%%%%:  419-block  0
    %%%%%:  419-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  419-block  2
branch  3 never executed
branch  4 never executed (fallthrough)
        -:  420:	;
    #####:  421:      if (__last_char._M_is_char())
    %%%%%:  421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  422:	__matcher._M_add_char(__last_char.get());
    %%%%%:  422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  423:      __matcher._M_ready();
    %%%%%:  423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  424:      _M_stack.push(_StateSeqT(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  424-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  424-block  1
call   10 never executed
    $$$$$:  424-block  2
call   11 never executed
    $$$$$:  424-block  3
    $$$$$:  424-block  4
    #####:  425:		      *_M_nfa,
    %%%%%:  425-block  0
call    0 never executed
    #####:  426:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  426-block  0
call    0 never executed
call    1 never executed
    #####:  427:    }
call    0 never executed
    $$$$$:  427-block  0
call    1 never executed
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb0ELb1EEEvb:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb0ELb1EEEvb called 0 returned 0% blocks executed 0%
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_bracket_matcher(bool __neg)
        -:  411:    {
    #####:  412:      _BracketMatcher<__icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  412-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  413:      _BracketState __last_char;
    #####:  414:      if (_M_try_char())
    %%%%%:  414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  414-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  415:	__last_char.set(_M_value[0]);
    %%%%%:  415-block  0
call    0 never executed
call    1 never executed
    #####:  416:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  416-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  417:	// Dash as first character is a normal character.
    #####:  418:	__last_char.set('-');
    %%%%%:  418-block  0
call    0 never executed
    #####:  419:      while (_M_expression_term(__last_char, __matcher))
    %%%%%:  419-block  0
    %%%%%:  419-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  419-block  2
branch  3 never executed
branch  4 never executed (fallthrough)
        -:  420:	;
    #####:  421:      if (__last_char._M_is_char())
    %%%%%:  421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  422:	__matcher._M_add_char(__last_char.get());
    %%%%%:  422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  423:      __matcher._M_ready();
    %%%%%:  423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  424:      _M_stack.push(_StateSeqT(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  424-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  424-block  1
call   10 never executed
    $$$$$:  424-block  2
call   11 never executed
    $$$$$:  424-block  3
    $$$$$:  424-block  4
    #####:  425:		      *_M_nfa,
    %%%%%:  425-block  0
call    0 never executed
    #####:  426:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  426-block  0
call    0 never executed
call    1 never executed
    #####:  427:    }
call    0 never executed
    $$$$$:  427-block  0
call    1 never executed
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb0ELb0EEEvb:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb0ELb0EEEvb called 0 returned 0% blocks executed 0%
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_bracket_matcher(bool __neg)
        -:  411:    {
    #####:  412:      _BracketMatcher<__icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  412-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  413:      _BracketState __last_char;
    #####:  414:      if (_M_try_char())
    %%%%%:  414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  414-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  415:	__last_char.set(_M_value[0]);
    %%%%%:  415-block  0
call    0 never executed
call    1 never executed
    #####:  416:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  416-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  417:	// Dash as first character is a normal character.
    #####:  418:	__last_char.set('-');
    %%%%%:  418-block  0
call    0 never executed
    #####:  419:      while (_M_expression_term(__last_char, __matcher))
    %%%%%:  419-block  0
    %%%%%:  419-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  419-block  2
branch  3 never executed
branch  4 never executed (fallthrough)
        -:  420:	;
    #####:  421:      if (__last_char._M_is_char())
    %%%%%:  421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  422:	__matcher._M_add_char(__last_char.get());
    %%%%%:  422-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  423:      __matcher._M_ready();
    %%%%%:  423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  424:      _M_stack.push(_StateSeqT(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  424-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  424-block  1
call   10 never executed
    $$$$$:  424-block  2
call   11 never executed
    $$$$$:  424-block  3
    $$$$$:  424-block  4
    #####:  425:		      *_M_nfa,
    %%%%%:  425-block  0
call    0 never executed
    #####:  426:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  426-block  0
call    0 never executed
call    1 never executed
    #####:  427:    }
call    0 never executed
    $$$$$:  427-block  0
call    1 never executed
------------------
        -:  428:
        -:  429:  template<typename _TraitsT>
        -:  430:  template<bool __icase, bool __collate>
        -:  431:    bool
    #####:  432:    _Compiler<_TraitsT>::
        -:  433:    _M_expression_term(_BracketState& __last_char,
        -:  434:		       _BracketMatcher<__icase, __collate>& __matcher)
        -:  435:    {
    #####:  436:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    #####:  437:	return false;
        -:  438:
        -:  439:      // Add any previously cached char into the matcher and update cache.
    #####:  440:      const auto __push_char = [&](_CharT __ch)
        -:  441:      {
    #####:  442:	if (__last_char._M_is_char())
    %%%%%:  442-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  442-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  442-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%:  442-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
    #####:  443:	  __matcher._M_add_char(__last_char.get());
    %%%%%:  443-block  0
call    0 never executed
call    1 never executed
    %%%%%:  443-block  1
call    2 never executed
call    3 never executed
    %%%%%:  443-block  2
call    4 never executed
call    5 never executed
    %%%%%:  443-block  3
call    6 never executed
call    7 never executed
    #####:  444:	__last_char.set(__ch);
    %%%%%:  444-block  0
call    0 never executed
    %%%%%:  444-block  1
call    1 never executed
    %%%%%:  444-block  2
call    2 never executed
    %%%%%:  444-block  3
call    3 never executed
        -:  445:      };
        -:  446:      // Add any previously cached char into the matcher and update cache.
    #####:  447:      const auto __push_class = [&]
        -:  448:      {
    #####:  449:        if (__last_char._M_is_char())
    %%%%%:  449-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  449-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  449-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%:  449-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
    #####:  450:	  __matcher._M_add_char(__last_char.get());
    %%%%%:  450-block  0
call    0 never executed
call    1 never executed
    %%%%%:  450-block  1
call    2 never executed
call    3 never executed
    %%%%%:  450-block  2
call    4 never executed
call    5 never executed
    %%%%%:  450-block  3
call    6 never executed
call    7 never executed
        -:  451:	// We don't cache anything here, just record that the last thing
        -:  452:	// processed was a character class (or similar).
    #####:  453:	__last_char.reset(_BracketState::_Type::_Class);
    %%%%%:  453-block  0
call    0 never executed
    %%%%%:  453-block  1
call    1 never executed
    %%%%%:  453-block  2
call    2 never executed
    %%%%%:  453-block  3
call    3 never executed
        -:  454:      };
        -:  455:
    #####:  456:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
        -:  457:	{
    #####:  458:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    #####:  459:	  if (__symbol.size() == 1)
    #####:  460:	    __push_char(__symbol[0]);
        -:  461:	  else
    #####:  462:	    __push_class();
    #####:  463:	}
    #####:  464:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
        -:  465:	{
    #####:  466:	  __push_class();
    #####:  467:	  __matcher._M_add_equivalence_class(_M_value);
        -:  468:	}
    #####:  469:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
        -:  470:	{
    #####:  471:	  __push_class();
    #####:  472:	  __matcher._M_add_character_class(_M_value, false);
        -:  473:	}
    #####:  474:      else if (_M_try_char())
    #####:  475:	__push_char(_M_value[0]);
        -:  476:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  477:      // except when the '-' is the first or last character in the bracket
        -:  478:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  479:      // normal character. Also see above, where _M_expression_term gets called.
        -:  480:      //
        -:  481:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  482:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  483:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  484:      //
        -:  485:      // It turns out that no one reads BNFs ;)
    #####:  486:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
        -:  487:	{
    #####:  488:	  if (_M_match_token(_ScannerT::_S_token_bracket_end))
        -:  489:	    {
        -:  490:	      // For "-]" the dash is a literal character.
    #####:  491:	      __push_char('-');
    #####:  492:	      return false;
        -:  493:	    }
    #####:  494:	  else if (__last_char._M_is_class())
        -:  495:	    {
        -:  496:	      // "\\w-" is invalid, start of range must be a single char.
    #####:  497:	      __throw_regex_error(regex_constants::error_range,
        -:  498:				  "Invalid start of '[x-x]' range in "
        -:  499:				  "regular expression");
        -:  500:	    }
    #####:  501:	  else if (__last_char._M_is_char())
        -:  502:	    {
    #####:  503:	      if (_M_try_char())
        -:  504:		{
        -:  505:		  // "x-y"
    #####:  506:		  __matcher._M_make_range(__last_char.get(), _M_value[0]);
    #####:  507:		  __last_char.reset();
        -:  508:		}
    #####:  509:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
        -:  510:		{
        -:  511:		  // "x--"
    #####:  512:		  __matcher._M_make_range(__last_char.get(), '-');
    #####:  513:		  __last_char.reset();
        -:  514:		}
        -:  515:	      else
    #####:  516:		__throw_regex_error(regex_constants::error_range,
        -:  517:				    "Invalid end of '[x-x]' range in "
        -:  518:				    "regular expression");
        -:  519:	    }
    #####:  520:	  else if (_M_flags & regex_constants::ECMAScript)
        -:  521:	    {
        -:  522:	      // A dash that is not part of an existing range. Might be the
        -:  523:	      // start of a new range, or might just be a literal '-' char.
        -:  524:	      // Only ECMAScript allows that in the middle of a bracket expr.
    #####:  525:	      __push_char('-');
        -:  526:	    }
        -:  527:	  else
    #####:  528:	    __throw_regex_error(regex_constants::error_range,
        -:  529:				"Invalid location of '-' within '[...]' in "
        -:  530:				"POSIX regular expression");
        -:  531:	}
    #####:  532:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
        -:  533:	{
    #####:  534:	  __push_class();
    #####:  535:	  __matcher._M_add_character_class(_M_value,
    #####:  536:					   _M_ctype.is(_CtypeT::upper,
    #####:  537:						       _M_value[0]));
        -:  538:	}
        -:  539:      else
    #####:  540:	__throw_regex_error(regex_constants::error_brack,
        -:  541:			    "Unexpected character within '[...]' in "
        -:  542:			    "regular expression");
    #####:  543:      return true;
        -:  544:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb1ELb1EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb1ELb1EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE called 0 returned 0% blocks executed 0%
    #####:  432:    _Compiler<_TraitsT>::
        -:  433:    _M_expression_term(_BracketState& __last_char,
        -:  434:		       _BracketMatcher<__icase, __collate>& __matcher)
        -:  435:    {
    #####:  436:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  436-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  436-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  437:	return false;
    %%%%%:  437-block  0
        -:  438:
        -:  439:      // Add any previously cached char into the matcher and update cache.
    #####:  440:      const auto __push_char = [&](_CharT __ch)
        -:  441:      {
        -:  442:	if (__last_char._M_is_char())
        -:  443:	  __matcher._M_add_char(__last_char.get());
        -:  444:	__last_char.set(__ch);
        -:  445:      };
        -:  446:      // Add any previously cached char into the matcher and update cache.
    #####:  447:      const auto __push_class = [&]
        -:  448:      {
        -:  449:        if (__last_char._M_is_char())
        -:  450:	  __matcher._M_add_char(__last_char.get());
        -:  451:	// We don't cache anything here, just record that the last thing
        -:  452:	// processed was a character class (or similar).
        -:  453:	__last_char.reset(_BracketState::_Type::_Class);
        -:  454:      };
        -:  455:
    #####:  456:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  456-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  456-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  457:	{
    #####:  458:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  458-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  459:	  if (__symbol.size() == 1)
    %%%%%:  459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  460:	    __push_char(__symbol[0]);
    %%%%%:  460-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  461:	  else
    #####:  462:	    __push_class();
    %%%%%:  462-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  463:	}
    %%%%%:  463-block  0
call    0 never executed
    $$$$$:  463-block  1
call    1 never executed
    #####:  464:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  464-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  465:	{
    #####:  466:	  __push_class();
    %%%%%:  466-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  467:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  467-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  468:	}
    #####:  469:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  469-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  469-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  470:	{
    #####:  471:	  __push_class();
    %%%%%:  471-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  472:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  472-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  473:	}
    #####:  474:      else if (_M_try_char())
    %%%%%:  474-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  474-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  475:	__push_char(_M_value[0]);
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  476:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  477:      // except when the '-' is the first or last character in the bracket
        -:  478:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  479:      // normal character. Also see above, where _M_expression_term gets called.
        -:  480:      //
        -:  481:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  482:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  483:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  484:      //
        -:  485:      // It turns out that no one reads BNFs ;)
    #####:  486:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  486-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  486-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  487:	{
    #####:  488:	  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  488-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  488-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  489:	    {
        -:  490:	      // For "-]" the dash is a literal character.
    #####:  491:	      __push_char('-');
    %%%%%:  491-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  492:	      return false;
    %%%%%:  492-block  0
        -:  493:	    }
    #####:  494:	  else if (__last_char._M_is_class())
    %%%%%:  494-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  495:	    {
        -:  496:	      // "\\w-" is invalid, start of range must be a single char.
    #####:  497:	      __throw_regex_error(regex_constants::error_range,
    %%%%%:  497-block  0
call    0 never executed
        -:  498:				  "Invalid start of '[x-x]' range in "
        -:  499:				  "regular expression");
        -:  500:	    }
    #####:  501:	  else if (__last_char._M_is_char())
    %%%%%:  501-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  502:	    {
    #####:  503:	      if (_M_try_char())
    %%%%%:  503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  503-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  504:		{
        -:  505:		  // "x-y"
    #####:  506:		  __matcher._M_make_range(__last_char.get(), _M_value[0]);
    %%%%%:  506-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  507:		  __last_char.reset();
    %%%%%:  507-block  0
call    0 never executed
        -:  508:		}
    #####:  509:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  509-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  510:		{
        -:  511:		  // "x--"
    #####:  512:		  __matcher._M_make_range(__last_char.get(), '-');
    %%%%%:  512-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  513:		  __last_char.reset();
    %%%%%:  513-block  0
call    0 never executed
        -:  514:		}
        -:  515:	      else
    #####:  516:		__throw_regex_error(regex_constants::error_range,
    %%%%%:  516-block  0
call    0 never executed
        -:  517:				    "Invalid end of '[x-x]' range in "
        -:  518:				    "regular expression");
        -:  519:	    }
    #####:  520:	  else if (_M_flags & regex_constants::ECMAScript)
    %%%%%:  520-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  521:	    {
        -:  522:	      // A dash that is not part of an existing range. Might be the
        -:  523:	      // start of a new range, or might just be a literal '-' char.
        -:  524:	      // Only ECMAScript allows that in the middle of a bracket expr.
    #####:  525:	      __push_char('-');
    %%%%%:  525-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  526:	    }
        -:  527:	  else
    #####:  528:	    __throw_regex_error(regex_constants::error_range,
    %%%%%:  528-block  0
call    0 never executed
        -:  529:				"Invalid location of '-' within '[...]' in "
        -:  530:				"POSIX regular expression");
        -:  531:	}
    #####:  532:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  532-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  533:	{
    #####:  534:	  __push_class();
    %%%%%:  534-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  535:	  __matcher._M_add_character_class(_M_value,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  536:					   _M_ctype.is(_CtypeT::upper,
call    0 never executed
    #####:  537:						       _M_value[0]));
    %%%%%:  537-block  0
call    0 never executed
        -:  538:	}
        -:  539:      else
    #####:  540:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  540-block  0
call    0 never executed
        -:  541:			    "Unexpected character within '[...]' in "
        -:  542:			    "regular expression");
    #####:  543:      return true;
    %%%%%:  543-block  0
        -:  544:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb1ELb0EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb1ELb0EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE called 0 returned 0% blocks executed 0%
    #####:  432:    _Compiler<_TraitsT>::
        -:  433:    _M_expression_term(_BracketState& __last_char,
        -:  434:		       _BracketMatcher<__icase, __collate>& __matcher)
        -:  435:    {
    #####:  436:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  436-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  436-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  437:	return false;
    %%%%%:  437-block  0
        -:  438:
        -:  439:      // Add any previously cached char into the matcher and update cache.
    #####:  440:      const auto __push_char = [&](_CharT __ch)
        -:  441:      {
        -:  442:	if (__last_char._M_is_char())
        -:  443:	  __matcher._M_add_char(__last_char.get());
        -:  444:	__last_char.set(__ch);
        -:  445:      };
        -:  446:      // Add any previously cached char into the matcher and update cache.
    #####:  447:      const auto __push_class = [&]
        -:  448:      {
        -:  449:        if (__last_char._M_is_char())
        -:  450:	  __matcher._M_add_char(__last_char.get());
        -:  451:	// We don't cache anything here, just record that the last thing
        -:  452:	// processed was a character class (or similar).
        -:  453:	__last_char.reset(_BracketState::_Type::_Class);
        -:  454:      };
        -:  455:
    #####:  456:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  456-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  456-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  457:	{
    #####:  458:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  458-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  459:	  if (__symbol.size() == 1)
    %%%%%:  459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  460:	    __push_char(__symbol[0]);
    %%%%%:  460-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  461:	  else
    #####:  462:	    __push_class();
    %%%%%:  462-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  463:	}
    %%%%%:  463-block  0
call    0 never executed
    $$$$$:  463-block  1
call    1 never executed
    #####:  464:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  464-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  465:	{
    #####:  466:	  __push_class();
    %%%%%:  466-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  467:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  467-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  468:	}
    #####:  469:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  469-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  469-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  470:	{
    #####:  471:	  __push_class();
    %%%%%:  471-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  472:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  472-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  473:	}
    #####:  474:      else if (_M_try_char())
    %%%%%:  474-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  474-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  475:	__push_char(_M_value[0]);
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  476:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  477:      // except when the '-' is the first or last character in the bracket
        -:  478:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  479:      // normal character. Also see above, where _M_expression_term gets called.
        -:  480:      //
        -:  481:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  482:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  483:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  484:      //
        -:  485:      // It turns out that no one reads BNFs ;)
    #####:  486:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  486-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  486-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  487:	{
    #####:  488:	  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  488-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  488-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  489:	    {
        -:  490:	      // For "-]" the dash is a literal character.
    #####:  491:	      __push_char('-');
    %%%%%:  491-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  492:	      return false;
    %%%%%:  492-block  0
        -:  493:	    }
    #####:  494:	  else if (__last_char._M_is_class())
    %%%%%:  494-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  495:	    {
        -:  496:	      // "\\w-" is invalid, start of range must be a single char.
    #####:  497:	      __throw_regex_error(regex_constants::error_range,
    %%%%%:  497-block  0
call    0 never executed
        -:  498:				  "Invalid start of '[x-x]' range in "
        -:  499:				  "regular expression");
        -:  500:	    }
    #####:  501:	  else if (__last_char._M_is_char())
    %%%%%:  501-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  502:	    {
    #####:  503:	      if (_M_try_char())
    %%%%%:  503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  503-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  504:		{
        -:  505:		  // "x-y"
    #####:  506:		  __matcher._M_make_range(__last_char.get(), _M_value[0]);
    %%%%%:  506-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  507:		  __last_char.reset();
    %%%%%:  507-block  0
call    0 never executed
        -:  508:		}
    #####:  509:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  509-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  510:		{
        -:  511:		  // "x--"
    #####:  512:		  __matcher._M_make_range(__last_char.get(), '-');
    %%%%%:  512-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  513:		  __last_char.reset();
    %%%%%:  513-block  0
call    0 never executed
        -:  514:		}
        -:  515:	      else
    #####:  516:		__throw_regex_error(regex_constants::error_range,
    %%%%%:  516-block  0
call    0 never executed
        -:  517:				    "Invalid end of '[x-x]' range in "
        -:  518:				    "regular expression");
        -:  519:	    }
    #####:  520:	  else if (_M_flags & regex_constants::ECMAScript)
    %%%%%:  520-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  521:	    {
        -:  522:	      // A dash that is not part of an existing range. Might be the
        -:  523:	      // start of a new range, or might just be a literal '-' char.
        -:  524:	      // Only ECMAScript allows that in the middle of a bracket expr.
    #####:  525:	      __push_char('-');
    %%%%%:  525-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  526:	    }
        -:  527:	  else
    #####:  528:	    __throw_regex_error(regex_constants::error_range,
    %%%%%:  528-block  0
call    0 never executed
        -:  529:				"Invalid location of '-' within '[...]' in "
        -:  530:				"POSIX regular expression");
        -:  531:	}
    #####:  532:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  532-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  533:	{
    #####:  534:	  __push_class();
    %%%%%:  534-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  535:	  __matcher._M_add_character_class(_M_value,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  536:					   _M_ctype.is(_CtypeT::upper,
call    0 never executed
    #####:  537:						       _M_value[0]));
    %%%%%:  537-block  0
call    0 never executed
        -:  538:	}
        -:  539:      else
    #####:  540:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  540-block  0
call    0 never executed
        -:  541:			    "Unexpected character within '[...]' in "
        -:  542:			    "regular expression");
    #####:  543:      return true;
    %%%%%:  543-block  0
        -:  544:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb0ELb1EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb0ELb1EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE called 0 returned 0% blocks executed 0%
    #####:  432:    _Compiler<_TraitsT>::
        -:  433:    _M_expression_term(_BracketState& __last_char,
        -:  434:		       _BracketMatcher<__icase, __collate>& __matcher)
        -:  435:    {
    #####:  436:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  436-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  436-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  437:	return false;
    %%%%%:  437-block  0
        -:  438:
        -:  439:      // Add any previously cached char into the matcher and update cache.
    #####:  440:      const auto __push_char = [&](_CharT __ch)
        -:  441:      {
        -:  442:	if (__last_char._M_is_char())
        -:  443:	  __matcher._M_add_char(__last_char.get());
        -:  444:	__last_char.set(__ch);
        -:  445:      };
        -:  446:      // Add any previously cached char into the matcher and update cache.
    #####:  447:      const auto __push_class = [&]
        -:  448:      {
        -:  449:        if (__last_char._M_is_char())
        -:  450:	  __matcher._M_add_char(__last_char.get());
        -:  451:	// We don't cache anything here, just record that the last thing
        -:  452:	// processed was a character class (or similar).
        -:  453:	__last_char.reset(_BracketState::_Type::_Class);
        -:  454:      };
        -:  455:
    #####:  456:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  456-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  456-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  457:	{
    #####:  458:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  458-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  459:	  if (__symbol.size() == 1)
    %%%%%:  459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  460:	    __push_char(__symbol[0]);
    %%%%%:  460-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  461:	  else
    #####:  462:	    __push_class();
    %%%%%:  462-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  463:	}
    %%%%%:  463-block  0
call    0 never executed
    $$$$$:  463-block  1
call    1 never executed
    #####:  464:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  464-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  465:	{
    #####:  466:	  __push_class();
    %%%%%:  466-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  467:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  467-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  468:	}
    #####:  469:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  469-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  469-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  470:	{
    #####:  471:	  __push_class();
    %%%%%:  471-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  472:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  472-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  473:	}
    #####:  474:      else if (_M_try_char())
    %%%%%:  474-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  474-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  475:	__push_char(_M_value[0]);
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  476:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  477:      // except when the '-' is the first or last character in the bracket
        -:  478:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  479:      // normal character. Also see above, where _M_expression_term gets called.
        -:  480:      //
        -:  481:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  482:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  483:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  484:      //
        -:  485:      // It turns out that no one reads BNFs ;)
    #####:  486:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  486-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  486-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  487:	{
    #####:  488:	  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  488-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  488-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  489:	    {
        -:  490:	      // For "-]" the dash is a literal character.
    #####:  491:	      __push_char('-');
    %%%%%:  491-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  492:	      return false;
    %%%%%:  492-block  0
        -:  493:	    }
    #####:  494:	  else if (__last_char._M_is_class())
    %%%%%:  494-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  495:	    {
        -:  496:	      // "\\w-" is invalid, start of range must be a single char.
    #####:  497:	      __throw_regex_error(regex_constants::error_range,
    %%%%%:  497-block  0
call    0 never executed
        -:  498:				  "Invalid start of '[x-x]' range in "
        -:  499:				  "regular expression");
        -:  500:	    }
    #####:  501:	  else if (__last_char._M_is_char())
    %%%%%:  501-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  502:	    {
    #####:  503:	      if (_M_try_char())
    %%%%%:  503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  503-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  504:		{
        -:  505:		  // "x-y"
    #####:  506:		  __matcher._M_make_range(__last_char.get(), _M_value[0]);
    %%%%%:  506-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  507:		  __last_char.reset();
    %%%%%:  507-block  0
call    0 never executed
        -:  508:		}
    #####:  509:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  509-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  510:		{
        -:  511:		  // "x--"
    #####:  512:		  __matcher._M_make_range(__last_char.get(), '-');
    %%%%%:  512-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  513:		  __last_char.reset();
    %%%%%:  513-block  0
call    0 never executed
        -:  514:		}
        -:  515:	      else
    #####:  516:		__throw_regex_error(regex_constants::error_range,
    %%%%%:  516-block  0
call    0 never executed
        -:  517:				    "Invalid end of '[x-x]' range in "
        -:  518:				    "regular expression");
        -:  519:	    }
    #####:  520:	  else if (_M_flags & regex_constants::ECMAScript)
    %%%%%:  520-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  521:	    {
        -:  522:	      // A dash that is not part of an existing range. Might be the
        -:  523:	      // start of a new range, or might just be a literal '-' char.
        -:  524:	      // Only ECMAScript allows that in the middle of a bracket expr.
    #####:  525:	      __push_char('-');
    %%%%%:  525-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  526:	    }
        -:  527:	  else
    #####:  528:	    __throw_regex_error(regex_constants::error_range,
    %%%%%:  528-block  0
call    0 never executed
        -:  529:				"Invalid location of '-' within '[...]' in "
        -:  530:				"POSIX regular expression");
        -:  531:	}
    #####:  532:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  532-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  533:	{
    #####:  534:	  __push_class();
    %%%%%:  534-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  535:	  __matcher._M_add_character_class(_M_value,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  536:					   _M_ctype.is(_CtypeT::upper,
call    0 never executed
    #####:  537:						       _M_value[0]));
    %%%%%:  537-block  0
call    0 never executed
        -:  538:	}
        -:  539:      else
    #####:  540:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  540-block  0
call    0 never executed
        -:  541:			    "Unexpected character within '[...]' in "
        -:  542:			    "regular expression");
    #####:  543:      return true;
    %%%%%:  543-block  0
        -:  544:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb0ELb0EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb0ELb0EEEbRNS4_13_BracketStateERNS_15_BracketMatcherIS3_XT_EXT0_EEE called 0 returned 0% blocks executed 0%
    #####:  432:    _Compiler<_TraitsT>::
        -:  433:    _M_expression_term(_BracketState& __last_char,
        -:  434:		       _BracketMatcher<__icase, __collate>& __matcher)
        -:  435:    {
    #####:  436:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  436-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  436-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  437:	return false;
    %%%%%:  437-block  0
        -:  438:
        -:  439:      // Add any previously cached char into the matcher and update cache.
    #####:  440:      const auto __push_char = [&](_CharT __ch)
        -:  441:      {
        -:  442:	if (__last_char._M_is_char())
        -:  443:	  __matcher._M_add_char(__last_char.get());
        -:  444:	__last_char.set(__ch);
        -:  445:      };
        -:  446:      // Add any previously cached char into the matcher and update cache.
    #####:  447:      const auto __push_class = [&]
        -:  448:      {
        -:  449:        if (__last_char._M_is_char())
        -:  450:	  __matcher._M_add_char(__last_char.get());
        -:  451:	// We don't cache anything here, just record that the last thing
        -:  452:	// processed was a character class (or similar).
        -:  453:	__last_char.reset(_BracketState::_Type::_Class);
        -:  454:      };
        -:  455:
    #####:  456:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  456-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  456-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  457:	{
    #####:  458:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  458-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  459:	  if (__symbol.size() == 1)
    %%%%%:  459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  460:	    __push_char(__symbol[0]);
    %%%%%:  460-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  461:	  else
    #####:  462:	    __push_class();
    %%%%%:  462-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  463:	}
    %%%%%:  463-block  0
call    0 never executed
    $$$$$:  463-block  1
call    1 never executed
    #####:  464:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  464-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  465:	{
    #####:  466:	  __push_class();
    %%%%%:  466-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  467:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  467-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  468:	}
    #####:  469:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  469-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  469-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  470:	{
    #####:  471:	  __push_class();
    %%%%%:  471-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  472:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  472-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  473:	}
    #####:  474:      else if (_M_try_char())
    %%%%%:  474-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  474-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  475:	__push_char(_M_value[0]);
    %%%%%:  475-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  476:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  477:      // except when the '-' is the first or last character in the bracket
        -:  478:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  479:      // normal character. Also see above, where _M_expression_term gets called.
        -:  480:      //
        -:  481:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  482:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  483:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  484:      //
        -:  485:      // It turns out that no one reads BNFs ;)
    #####:  486:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  486-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  486-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  487:	{
    #####:  488:	  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  488-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  488-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  489:	    {
        -:  490:	      // For "-]" the dash is a literal character.
    #####:  491:	      __push_char('-');
    %%%%%:  491-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  492:	      return false;
    %%%%%:  492-block  0
        -:  493:	    }
    #####:  494:	  else if (__last_char._M_is_class())
    %%%%%:  494-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  495:	    {
        -:  496:	      // "\\w-" is invalid, start of range must be a single char.
    #####:  497:	      __throw_regex_error(regex_constants::error_range,
    %%%%%:  497-block  0
call    0 never executed
        -:  498:				  "Invalid start of '[x-x]' range in "
        -:  499:				  "regular expression");
        -:  500:	    }
    #####:  501:	  else if (__last_char._M_is_char())
    %%%%%:  501-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  502:	    {
    #####:  503:	      if (_M_try_char())
    %%%%%:  503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  503-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  504:		{
        -:  505:		  // "x-y"
    #####:  506:		  __matcher._M_make_range(__last_char.get(), _M_value[0]);
    %%%%%:  506-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  507:		  __last_char.reset();
    %%%%%:  507-block  0
call    0 never executed
        -:  508:		}
    #####:  509:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  509-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  510:		{
        -:  511:		  // "x--"
    #####:  512:		  __matcher._M_make_range(__last_char.get(), '-');
    %%%%%:  512-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  513:		  __last_char.reset();
    %%%%%:  513-block  0
call    0 never executed
        -:  514:		}
        -:  515:	      else
    #####:  516:		__throw_regex_error(regex_constants::error_range,
    %%%%%:  516-block  0
call    0 never executed
        -:  517:				    "Invalid end of '[x-x]' range in "
        -:  518:				    "regular expression");
        -:  519:	    }
    #####:  520:	  else if (_M_flags & regex_constants::ECMAScript)
    %%%%%:  520-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  521:	    {
        -:  522:	      // A dash that is not part of an existing range. Might be the
        -:  523:	      // start of a new range, or might just be a literal '-' char.
        -:  524:	      // Only ECMAScript allows that in the middle of a bracket expr.
    #####:  525:	      __push_char('-');
    %%%%%:  525-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  526:	    }
        -:  527:	  else
    #####:  528:	    __throw_regex_error(regex_constants::error_range,
    %%%%%:  528-block  0
call    0 never executed
        -:  529:				"Invalid location of '-' within '[...]' in "
        -:  530:				"POSIX regular expression");
        -:  531:	}
    #####:  532:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  532-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  533:	{
    #####:  534:	  __push_class();
    %%%%%:  534-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  535:	  __matcher._M_add_character_class(_M_value,
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  536:					   _M_ctype.is(_CtypeT::upper,
call    0 never executed
    #####:  537:						       _M_value[0]));
    %%%%%:  537-block  0
call    0 never executed
        -:  538:	}
        -:  539:      else
    #####:  540:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  540-block  0
call    0 never executed
        -:  541:			    "Unexpected character within '[...]' in "
        -:  542:			    "regular expression");
    #####:  543:      return true;
    %%%%%:  543-block  0
        -:  544:    }
------------------
        -:  545:
        -:  546:  template<typename _TraitsT>
        -:  547:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE11_M_try_charEv called 0 returned 0% blocks executed 0%
    #####:  548:    _Compiler<_TraitsT>::
        -:  549:    _M_try_char()
        -:  550:    {
    #####:  551:      bool __is_char = false;
    #####:  552:      if (_M_match_token(_ScannerT::_S_token_oct_num))
    %%%%%:  552-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  553:	{
    #####:  554:	  __is_char = true;
    #####:  555:	  _M_value.assign(1, _M_cur_int_value(8));
    %%%%%:  555-block  0
call    0 never executed
call    1 never executed
        -:  556:	}
    #####:  557:      else if (_M_match_token(_ScannerT::_S_token_hex_num))
    %%%%%:  557-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  558:	{
    #####:  559:	  __is_char = true;
    #####:  560:	  _M_value.assign(1, _M_cur_int_value(16));
    %%%%%:  560-block  0
call    0 never executed
call    1 never executed
        -:  561:	}
    #####:  562:      else if (_M_match_token(_ScannerT::_S_token_ord_char))
    %%%%%:  562-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  563:	__is_char = true;
    %%%%%:  563-block  0
    #####:  564:      return __is_char;
    %%%%%:  564-block  0
        -:  565:    }
        -:  566:
        -:  567:  template<typename _TraitsT>
        -:  568:    bool
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE14_M_match_tokenENS_12_ScannerBase7_TokenTE called 0 returned 0% blocks executed 0%
    #####:  569:    _Compiler<_TraitsT>::
        -:  570:    _M_match_token(_TokenT __token)
        -:  571:    {
    #####:  572:      if (__token == _M_scanner._M_get_token())
    %%%%%:  572-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:  573:	{
    #####:  574:	  _M_value = _M_scanner._M_get_value();
    %%%%%:  574-block  0
call    0 never executed
call    1 never executed
    #####:  575:	  _M_scanner._M_advance();
call    0 never executed
    #####:  576:	  return true;
        -:  577:	}
    #####:  578:      return false;
    %%%%%:  578-block  0
        -:  579:    }
        -:  580:
        -:  581:  template<typename _TraitsT>
        -:  582:    int
function _ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE16_M_cur_int_valueEi called 0 returned 0% blocks executed 0%
    #####:  583:    _Compiler<_TraitsT>::
        -:  584:    _M_cur_int_value(int __radix)
        -:  585:    {
    #####:  586:      int __v = 0;
    #####:  587:      for (_CharT __c : _M_value)
    %%%%%:  587-block  0
call    0 never executed
call    1 never executed
    %%%%%:  587-block  1
call    2 never executed
    %%%%%:  587-block  2
call    3 never executed
    %%%%%:  587-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  588:	if (__builtin_mul_overflow(__v, __radix, &__v)
    #####:  589:	    || __builtin_add_overflow(__v, _M_traits.value(__c, __radix), &__v))
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  589-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  589-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  589-block  2
    %%%%%:  589-block  3
    %%%%%:  589-block  4
branch  7 never executed (fallthrough)
branch  8 never executed
    #####:  590:	    std::__throw_regex_error(regex_constants::error_backref,
    %%%%%:  590-block  0
call    0 never executed
        -:  591:				     "invalid back reference");
    #####:  592:      return __v;
    %%%%%:  592-block  0
    %%%%%:  592-block  1
        -:  593:    }
        -:  594:
        -:  595:  template<typename _TraitsT, bool __icase, bool __collate>
        -:  596:    bool
    #####:  597:    _BracketMatcher<_TraitsT, __icase, __collate>::
        -:  598:    _M_apply(_CharT __ch, false_type) const
        -:  599:    {
    #####:  600:      return [this, __ch]
        -:  601:      {
    #####:  602:	if (std::binary_search(_M_char_set.begin(), _M_char_set.end(),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    #####:  603:			       _M_translator._M_translate(__ch)))
    %%%%%:  603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  603-block  1
call    3 never executed
    %%%%%:  603-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  603-block  3
    %%%%%:  603-block  4
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  603-block  5
call    9 never executed
    %%%%%:  603-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  603-block  7
call   12 never executed
    %%%%%:  603-block  8
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  603-block  9
call   16 never executed
    %%%%%:  603-block 10
branch 17 never executed (fallthrough)
branch 18 never executed
    $$$$$:  603-block 11
    %%%%%:  603-block 12
call   19 never executed
call   20 never executed
    %%%%%:  603-block 13
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$:  603-block 14
call   23 never executed
    #####:  604:	  return true;
    %%%%%:  604-block  0
    %%%%%:  604-block  1
    %%%%%:  604-block  2
    %%%%%:  604-block  3
    #####:  605:	auto __s = _M_translator._M_transform(__ch);
    %%%%%:  605-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  605-block  1
call    3 never executed
    %%%%%:  605-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  605-block  3
call    7 never executed
    #####:  606:	for (auto& __it : _M_range_set)
    %%%%%:  606-block  0
call    0 never executed
call    1 never executed
    %%%%%:  606-block  1
call    2 never executed
    %%%%%:  606-block  2
call    3 never executed
    %%%%%:  606-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
call    7 never executed
call    8 never executed
    %%%%%:  606-block  4
call    9 never executed
    %%%%%:  606-block  5
call   10 never executed
    %%%%%:  606-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed (fallthrough)
    %%%%%:  606-block  7
call   14 never executed
call   15 never executed
    %%%%%:  606-block  8
call   16 never executed
    %%%%%:  606-block  9
call   17 never executed
    %%%%%:  606-block 10
call   18 never executed
branch 19 never executed
branch 20 never executed (fallthrough)
call   21 never executed
call   22 never executed
    %%%%%:  606-block 11
call   23 never executed
    %%%%%:  606-block 12
call   24 never executed
    %%%%%:  606-block 13
call   25 never executed
branch 26 never executed
branch 27 never executed (fallthrough)
    #####:  607:	  if (_M_translator._M_match_range(__it.first, __it.second, __s))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  607-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  607-block  1
branch  8 never executed (fallthrough)
branch  9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed
    #####:  608:	    return true;
    %%%%%:  608-block  0
    %%%%%:  608-block  1
    %%%%%:  608-block  2
    %%%%%:  608-block  3
    #####:  609:	if (_M_traits.isctype(__ch, _M_class_set))
    %%%%%:  609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  609-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  609-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  609-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  609-block  4
branch 11 never executed (fallthrough)
branch 12 never executed
    %%%%%:  609-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed
    #####:  610:	  return true;
    %%%%%:  610-block  0
    %%%%%:  610-block  1
    %%%%%:  610-block  2
    %%%%%:  610-block  3
    #####:  611:	if (std::find(_M_equiv_set.begin(), _M_equiv_set.end(),
    %%%%%:  611-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$:  611-block  1
call    5 never executed
    $$$$$:  611-block  2
    $$$$$:  611-block  3
    %%%%%:  611-block  4
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    $$$$$:  611-block  5
call   11 never executed
    $$$$$:  611-block  6
    $$$$$:  611-block  7
    %%%%%:  611-block  8
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    $$$$$:  611-block  9
call   17 never executed
    $$$$$:  611-block 10
    $$$$$:  611-block 11
    %%%%%:  611-block 12
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    $$$$$:  611-block 13
call   23 never executed
    $$$$$:  611-block 14
    $$$$$:  611-block 15
    #####:  612:		      _M_traits.transform_primary(&__ch, &__ch+1))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####:  613:	    != _M_equiv_set.end())
    %%%%%:  613-block  0
call    0 never executed
    %%%%%:  613-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    $$$$$:  613-block  2
    %%%%%:  613-block  3
call    5 never executed
    %%%%%:  613-block  4
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$:  613-block  5
call   10 never executed
    %%%%%:  613-block  6
call   11 never executed
    %%%%%:  613-block  7
call   12 never executed
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  613-block  8
    %%%%%:  613-block  9
call   16 never executed
    %%%%%:  613-block 10
call   17 never executed
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$:  613-block 11
call   21 never executed
    #####:  614:	  return true;
    %%%%%:  614-block  0
    %%%%%:  614-block  1
    %%%%%:  614-block  2
    %%%%%:  614-block  3
    #####:  615:	for (auto& __it : _M_neg_class_set)
    %%%%%:  615-block  0
call    0 never executed
call    1 never executed
    %%%%%:  615-block  1
call    2 never executed
    %%%%%:  615-block  2
call    3 never executed
    %%%%%:  615-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    %%%%%:  615-block  4
call    7 never executed
call    8 never executed
    %%%%%:  615-block  5
call    9 never executed
    %%%%%:  615-block  6
call   10 never executed
    %%%%%:  615-block  7
call   11 never executed
branch 12 never executed
branch 13 never executed (fallthrough)
    %%%%%:  615-block  8
call   14 never executed
call   15 never executed
    %%%%%:  615-block  9
call   16 never executed
    %%%%%:  615-block 10
call   17 never executed
    %%%%%:  615-block 11
call   18 never executed
branch 19 never executed
branch 20 never executed (fallthrough)
    %%%%%:  615-block 12
call   21 never executed
call   22 never executed
    %%%%%:  615-block 13
call   23 never executed
    %%%%%:  615-block 14
call   24 never executed
    %%%%%:  615-block 15
call   25 never executed
branch 26 never executed
branch 27 never executed (fallthrough)
    #####:  616:	  if (!_M_traits.isctype(__ch, __it))
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  616-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  616-block  1
branch  8 never executed (fallthrough)
branch  9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  616-block  2
branch 13 never executed (fallthrough)
branch 14 never executed
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:  616-block  3
branch 18 never executed (fallthrough)
branch 19 never executed
    #####:  617:	    return true;
    %%%%%:  617-block  0
    %%%%%:  617-block  1
    %%%%%:  617-block  2
    %%%%%:  617-block  3
    #####:  618:	return false;
    %%%%%:  618-block  0
    %%%%%:  618-block  1
    %%%%%:  618-block  2
    %%%%%:  618-block  3
    #####:  619:      }() ^ _M_is_non_matching;
    %%%%%:  619-block  0
call    0 never executed
    $$$$$:  619-block  1
call    1 never executed
    %%%%%:  619-block  2
call    2 never executed
    $$$$$:  619-block  3
call    3 never executed
        -:  620:    }
        -:  621:} // namespace __detail
        -:  622:
        -:  623:_GLIBCXX_END_NAMESPACE_VERSION
        -:  624:} // namespace
