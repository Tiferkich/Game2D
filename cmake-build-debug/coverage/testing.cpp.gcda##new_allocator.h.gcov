        -:    0:Source:C:/Program Files/JetBrains/CLion 2023.2.2/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/new_allocator.h
        -:    0:Graph:C:\Users\sakhd\CLionProjects\gameLab3\cmake-build-debug\Tests\CMakeFiles\tests.dir\testing.cpp.gcno
        -:    0:Data:C:\Users\sakhd\CLionProjects\gameLab3\cmake-build-debug\Tests\CMakeFiles\tests.dir\testing.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/new_allocator.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _STD_NEW_ALLOCATOR_H
        -:   31:#define _STD_NEW_ALLOCATOR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <new>
        -:   35:#include <bits/functexcept.h>
        -:   36:#include <bits/move.h>
        -:   37:#if __cplusplus >= 201103L
        -:   38:#include <type_traits>
        -:   39:#endif
        -:   40:
        -:   41:namespace std _GLIBCXX_VISIBILITY(default)
        -:   42:{
        -:   43:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   44:
        -:   45:  /**
        -:   46:   * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].
        -:   47:   * @ingroup allocators
        -:   48:   *
        -:   49:   * This is precisely the allocator defined in the C++ Standard.
        -:   50:   *   - all allocation calls `operator new`
        -:   51:   *   - all deallocation calls `operator delete`
        -:   52:   *
        -:   53:   * This is the default base-class implementation of `std::allocator`,
        -:   54:   * and is also the base-class of the `__gnu_cxx::new_allocator` extension.
        -:   55:   * You should use either `std::allocator` or `__gnu_cxx::new_allocator`
        -:   56:   * instead of using this directly.
        -:   57:   *
        -:   58:   * @tparam  _Tp  Type of allocated object.
        -:   59:   *
        -:   60:   * @headerfile memory
        -:   61:   */
        -:   62:  template<typename _Tp>
        -:   63:    class __new_allocator
        -:   64:    {
        -:   65:    public:
        -:   66:      typedef _Tp        value_type;
        -:   67:      typedef std::size_t     size_type;
        -:   68:      typedef std::ptrdiff_t  difference_type;
        -:   69:#if __cplusplus <= 201703L
        -:   70:      typedef _Tp*       pointer;
        -:   71:      typedef const _Tp* const_pointer;
        -:   72:      typedef _Tp&       reference;
        -:   73:      typedef const _Tp& const_reference;
        -:   74:
        -:   75:      template<typename _Tp1>
        -:   76:	struct rebind
        -:   77:	{ typedef __new_allocator<_Tp1> other; };
        -:   78:#endif
        -:   79:
        -:   80:#if __cplusplus >= 201103L
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 2103. propagate_on_container_move_assignment
        -:   83:      typedef std::true_type propagate_on_container_move_assignment;
        -:   84:#endif
        -:   85:
        -:   86:      __attribute__((__always_inline__))
        -:   87:      _GLIBCXX20_CONSTEXPR
    2976*:   88:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    %%%%%:   88-block  0
    %%%%%:   88-block  1
    %%%%%:   88-block  2
    %%%%%:   88-block  3
    %%%%%:   88-block  4
    %%%%%:   88-block  5
    %%%%%:   88-block  6
    %%%%%:   88-block  7
    %%%%%:   88-block  8
    %%%%%:   88-block  9
    %%%%%:   88-block 10
    %%%%%:   88-block 11
    %%%%%:   88-block 12
    %%%%%:   88-block 13
    %%%%%:   88-block 14
    %%%%%:   88-block 15
    %%%%%:   88-block 16
    %%%%%:   88-block 17
    %%%%%:   88-block 18
    %%%%%:   88-block 19
    %%%%%:   88-block 20
    %%%%%:   88-block 21
    %%%%%:   88-block 22
    %%%%%:   88-block 23
    %%%%%:   88-block 24
    %%%%%:   88-block 25
    %%%%%:   88-block 26
    %%%%%:   88-block 27
    %%%%%:   88-block 28
    %%%%%:   88-block 29
        1:   88-block 30
        2:   88-block 31
        1:   88-block 32
        1:   88-block 33
        1:   88-block 34
        1:   88-block 35
        1:   88-block 36
        1:   88-block 37
        2:   88-block 38
        1:   88-block 39
        1:   88-block 40
        1:   88-block 41
        1:   88-block 42
        1:   88-block 43
        1:   88-block 44
    %%%%%:   88-block 45
    %%%%%:   88-block 46
        1:   88-block 47
        1:   88-block 48
        2:   88-block 49
        1:   88-block 50
        1:   88-block 51
    %%%%%:   88-block 52
    %%%%%:   88-block 53
    %%%%%:   88-block 54
    %%%%%:   88-block 55
       39:   88-block 56
        7:   88-block 57
    %%%%%:   88-block 58
        1:   88-block 59
    %%%%%:   88-block 60
       11:   88-block 61
        3:   88-block 62
        3:   88-block 63
        1:   88-block 64
        1:   88-block 65
        1:   88-block 66
        1:   88-block 67
        1:   88-block 68
        1:   88-block 69
        1:   88-block 70
    %%%%%:   88-block 71
    %%%%%:   88-block 72
        1:   88-block 73
    %%%%%:   88-block 74
    %%%%%:   88-block 75
    %%%%%:   88-block 76
    %%%%%:   88-block 77
    %%%%%:   88-block 78
    %%%%%:   88-block 79
    %%%%%:   88-block 80
    %%%%%:   88-block 81
        1:   88-block 82
        1:   88-block 83
      185:   88-block 84
       18:   88-block 85
       23:   88-block 86
    %%%%%:   88-block 87
    %%%%%:   88-block 88
    %%%%%:   88-block 89
    %%%%%:   88-block 90
        1:   88-block 91
       46:   88-block 92
        1:   88-block 93
        1:   88-block 94
        2:   88-block 95
        2:   88-block 96
        1:   88-block 97
        1:   88-block 98
        1:   88-block 99
        1:   88-block 100
        1:   88-block 101
        1:   88-block 102
        2:   88-block 103
    %%%%%:   88-block 104
    %%%%%:   88-block 105
    %%%%%:   88-block 106
        2:   88-block 107
        1:   88-block 108
    %%%%%:   88-block 109
        1:   88-block 110
        1:   88-block 111
        1:   88-block 112
        3:   88-block 113
        2:   88-block 114
        4:   88-block 115
        1:   88-block 116
        1:   88-block 117
        1:   88-block 118
        1:   88-block 119
        1:   88-block 120
        1:   88-block 121
        1:   88-block 122
        1:   88-block 123
        1:   88-block 124
        1:   88-block 125
        1:   88-block 126
        1:   88-block 127
        1:   88-block 128
        1:   88-block 129
        1:   88-block 130
        1:   88-block 131
        1:   88-block 132
        1:   88-block 133
        8:   88-block 134
        1:   88-block 135
        1:   88-block 136
       11:   88-block 137
        4:   88-block 138
        1:   88-block 139
        1:   88-block 140
        1:   88-block 141
        1:   88-block 142
        1:   88-block 143
        1:   88-block 144
        1:   88-block 145
        1:   88-block 146
        1:   88-block 147
        1:   88-block 148
        3:   88-block 149
        3:   88-block 150
        3:   88-block 151
        3:   88-block 152
        3:   88-block 153
        2:   88-block 154
        7:   88-block 155
        4:   88-block 156
        1:   88-block 157
        1:   88-block 158
       38:   88-block 159
       38:   88-block 160
       14:   88-block 161
       21:   88-block 162
        1:   88-block 163
        1:   88-block 164
        1:   88-block 165
        1:   88-block 166
        1:   88-block 167
        1:   88-block 168
        1:   88-block 169
        1:   88-block 170
        1:   88-block 171
        1:   88-block 172
        1:   88-block 173
        1:   88-block 174
        7:   88-block 175
       37:   88-block 176
       37:   88-block 177
       37:   88-block 178
       37:   88-block 179
    %%%%%:   88-block 180
       37:   88-block 181
        7:   88-block 182
        7:   88-block 183
        7:   88-block 184
        1:   88-block 185
        1:   88-block 186
    %%%%%:   88-block 187
    %%%%%:   88-block 188
       44:   88-block 189
       44:   88-block 190
    %%%%%:   88-block 191
    %%%%%:   88-block 192
    %%%%%:   88-block 193
    %%%%%:   88-block 194
    %%%%%:   88-block 195
    %%%%%:   88-block 196
    %%%%%:   88-block 197
    %%%%%:   88-block 198
    %%%%%:   88-block 199
    %%%%%:   88-block 200
    %%%%%:   88-block 201
    %%%%%:   88-block 202
    %%%%%:   88-block 203
    %%%%%:   88-block 204
    %%%%%:   88-block 205
    %%%%%:   88-block 206
    %%%%%:   88-block 207
    %%%%%:   88-block 208
    %%%%%:   88-block 209
    %%%%%:   88-block 210
    %%%%%:   88-block 211
    %%%%%:   88-block 212
    %%%%%:   88-block 213
    %%%%%:   88-block 214
    %%%%%:   88-block 215
    %%%%%:   88-block 216
    %%%%%:   88-block 217
    %%%%%:   88-block 218
    %%%%%:   88-block 219
    %%%%%:   88-block 220
    %%%%%:   88-block 221
    %%%%%:   88-block 222
    %%%%%:   88-block 223
    %%%%%:   88-block 224
    %%%%%:   88-block 225
    %%%%%:   88-block 226
    %%%%%:   88-block 227
    %%%%%:   88-block 228
    %%%%%:   88-block 229
    %%%%%:   88-block 230
    %%%%%:   88-block 231
    %%%%%:   88-block 232
    %%%%%:   88-block 233
    %%%%%:   88-block 234
    %%%%%:   88-block 235
    %%%%%:   88-block 236
    %%%%%:   88-block 237
    %%%%%:   88-block 238
    %%%%%:   88-block 239
    %%%%%:   88-block 240
    %%%%%:   88-block 241
    %%%%%:   88-block 242
    %%%%%:   88-block 243
    %%%%%:   88-block 244
    %%%%%:   88-block 245
    %%%%%:   88-block 246
    %%%%%:   88-block 247
    %%%%%:   88-block 248
    %%%%%:   88-block 249
    %%%%%:   88-block 250
    %%%%%:   88-block 251
    %%%%%:   88-block 252
    %%%%%:   88-block 253
    %%%%%:   88-block 254
    %%%%%:   88-block 255
    %%%%%:   88-block 256
    %%%%%:   88-block 257
    %%%%%:   88-block 258
    %%%%%:   88-block 259
    %%%%%:   88-block 260
    %%%%%:   88-block 261
    %%%%%:   88-block 262
    %%%%%:   88-block 263
    %%%%%:   88-block 264
    %%%%%:   88-block 265
    %%%%%:   88-block 266
    %%%%%:   88-block 267
    %%%%%:   88-block 268
    %%%%%:   88-block 269
    %%%%%:   88-block 270
    %%%%%:   88-block 271
    %%%%%:   88-block 272
        1:   88-block 273
    %%%%%:   88-block 274
        2:   88-block 275
    %%%%%:   88-block 276
      119:   88-block 277
    %%%%%:   88-block 278
    %%%%%:   88-block 279
    %%%%%:   88-block 280
      315:   88-block 281
    %%%%%:   88-block 282
    %%%%%:   88-block 283
    %%%%%:   88-block 284
    %%%%%:   88-block 285
    %%%%%:   88-block 286
    %%%%%:   88-block 287
    %%%%%:   88-block 288
    %%%%%:   88-block 289
        1:   88-block 290
        1:   88-block 291
        1:   88-block 292
        1:   88-block 293
        1:   88-block 294
        1:   88-block 295
        1:   88-block 296
        1:   88-block 297
        1:   88-block 298
        1:   88-block 299
        1:   88-block 300
        1:   88-block 301
        1:   88-block 302
        1:   88-block 303
        1:   88-block 304
        1:   88-block 305
        1:   88-block 306
        1:   88-block 307
        1:   88-block 308
        1:   88-block 309
        1:   88-block 310
        1:   88-block 311
        1:   88-block 312
        1:   88-block 313
        1:   88-block 314
        1:   88-block 315
        1:   88-block 316
        1:   88-block 317
        1:   88-block 318
        1:   88-block 319
        1:   88-block 320
        1:   88-block 321
        1:   88-block 322
        1:   88-block 323
        1:   88-block 324
        1:   88-block 325
        1:   88-block 326
        1:   88-block 327
        1:   88-block 328
        1:   88-block 329
        1:   88-block 330
        1:   88-block 331
        1:   88-block 332
        1:   88-block 333
        1:   88-block 334
        1:   88-block 335
        1:   88-block 336
        1:   88-block 337
        1:   88-block 338
        1:   88-block 339
        1:   88-block 340
        1:   88-block 341
        1:   88-block 342
        1:   88-block 343
        1:   88-block 344
        1:   88-block 345
        1:   88-block 346
        1:   88-block 347
        1:   88-block 348
        1:   88-block 349
        1:   88-block 350
        1:   88-block 351
        1:   88-block 352
        1:   88-block 353
        1:   88-block 354
        1:   88-block 355
        1:   88-block 356
        1:   88-block 357
        1:   88-block 358
        1:   88-block 359
        1:   88-block 360
        1:   88-block 361
        1:   88-block 362
        1:   88-block 363
        1:   88-block 364
        1:   88-block 365
        1:   88-block 366
        1:   88-block 367
        1:   88-block 368
        1:   88-block 369
        1:   88-block 370
        1:   88-block 371
        1:   88-block 372
        1:   88-block 373
        1:   88-block 374
        1:   88-block 375
        1:   88-block 376
        1:   88-block 377
        1:   88-block 378
        1:   88-block 379
        1:   88-block 380
        1:   88-block 381
        1:   88-block 382
        1:   88-block 383
        1:   88-block 384
        1:   88-block 385
        1:   88-block 386
        1:   88-block 387
        1:   88-block 388
        1:   88-block 389
    %%%%%:   88-block 390
        1:   88-block 391
        1:   88-block 392
        1:   88-block 393
        1:   88-block 394
    %%%%%:   88-block 395
    %%%%%:   88-block 396
    %%%%%:   88-block 397
    %%%%%:   88-block 398
    %%%%%:   88-block 399
        1:   88-block 400
        1:   88-block 401
    %%%%%:   88-block 402
    %%%%%:   88-block 403
    %%%%%:   88-block 404
    %%%%%:   88-block 405
     1104:   88-block 406
       14:   88-block 407
        -:   89:
        -:   90:      __attribute__((__always_inline__))
        -:   91:      _GLIBCXX20_CONSTEXPR
   23845*:   92:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    %%%%%:   92-block  0
    %%%%%:   92-block  1
    %%%%%:   92-block  2
    %%%%%:   92-block  3
    %%%%%:   92-block  4
    %%%%%:   92-block  5
    %%%%%:   92-block  6
    %%%%%:   92-block  7
    %%%%%:   92-block  8
    %%%%%:   92-block  9
       67:   92-block 10
       67:   92-block 11
    %%%%%:   92-block 12
    %%%%%:   92-block 13
        2:   92-block 14
        2:   92-block 15
        2:   92-block 16
      260:   92-block 17
    %%%%%:   92-block 18
    %%%%%:   92-block 19
      217:   92-block 20
    %%%%%:   92-block 21
    %%%%%:   92-block 22
        1:   92-block 23
    %%%%%:   92-block 24
    %%%%%:   92-block 25
    %%%%%:   92-block 26
        1:   92-block 27
        3:   92-block 28
     1177:   92-block 29
       20:   92-block 30
     1280:   92-block 31
        -:   93:
        -:   94:      template<typename _Tp1>
        -:   95:	__attribute__((__always_inline__))
        -:   96:	_GLIBCXX20_CONSTEXPR
        -:   97:	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   98:
        -:   99:#if __cplusplus <= 201703L
        -:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        -:  101:
        -:  102:      pointer
        -:  103:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:  104:      { return std::__addressof(__x); }
        -:  105:
        -:  106:      const_pointer
        -:  107:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:  108:      { return std::__addressof(__x); }
        -:  109:#endif
        -:  110:
        -:  111:#if __has_builtin(__builtin_operator_new) >= 201802L
        -:  112:# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
        -:  113:# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
        -:  114:#else
        -:  115:# define _GLIBCXX_OPERATOR_NEW ::operator new
        -:  116:# define _GLIBCXX_OPERATOR_DELETE ::operator delete
        -:  117:#endif
        -:  118:
        -:  119:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  120:      // about what the return value is when __n == 0.
        -:  121:      _GLIBCXX_NODISCARD _Tp*
    3537*:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    3537*:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    3537*:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch14AssertionStatsEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch14AssertionStatsEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairIiiEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairIiiEE8allocateEyPKv called 191 returned 100% blocks executed 67%
      191:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      191:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
      191:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 191
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      191:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      191:  147-block  0
call    0 returned 191
        -:  148:      }
------------------
_ZNSt15__new_allocatorI7DungeonE8allocateEyPKv:
function _ZNSt15__new_allocatorI7DungeonE8allocateEyPKv called 3 returned 100% blocks executed 67%
        3:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        3:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        3:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  147-block  0
call    0 returned 3
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPcE8allocateEyPKv:
function _ZNSt15__new_allocatorIPcE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EEE8allocateEyPKv called 3 returned 100% blocks executed 67%
        3:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        3:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        3:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  147-block  0
call    0 returned 3
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch8TestSpec11FilterMatchEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch8TestSpec11FilterMatchEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch11SectionInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch11SectionInfoEE8allocateEyPKv called 3 returned 100% blocks executed 67%
        3:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        3:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        3:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  147-block  0
call    0 returned 3
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch13SummaryColumnEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch13SummaryColumnEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIP5EnemyP4CeilEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIP5EnemyP4CeilEEE8allocateEyPKv called 247 returned 100% blocks executed 67%
      247:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      247:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
      247:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 247
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      247:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      247:  147-block  0
call    0 returned 247
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 3 returned 100% blocks executed 67%
        3:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        3:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        3:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  147-block  0
call    0 returned 3
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 3 returned 100% blocks executed 67%
        3:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        3:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        3:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  147-block  0
call    0 returned 3
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 11 returned 100% blocks executed 67%
       11:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       11:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       11:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       11:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       11:  147-block  0
call    0 returned 11
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE8allocateEyPKv called 4 returned 100% blocks executed 67%
        4:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        4:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        4:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        4:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        4:  147-block  0
call    0 returned 4
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail3ArgEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch5clara6detail3ArgEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
_ZNSt15__new_allocatorIcE8allocateEyPKv:
function _ZNSt15__new_allocatorIcE8allocateEyPKv called 1505 returned 100% blocks executed 86%
     1505:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
     1505:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
     1505:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1505
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
        -:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        -:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
     1505:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     1505:  147-block  0
call    0 returned 1505
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv called 1119 returned 100% blocks executed 67%
     1119:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
     1119:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
     1119:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1119
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
     1119:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     1119:  147-block  0
call    0 returned 1119
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch9StringRefEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch9StringRefEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairIiN5Catch9StringRefEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairIiN5Catch9StringRefEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairIyPKN5Catch8TestCaseEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairIyPKN5Catch8TestCaseEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch8TestCaseEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch8TestCaseEE8allocateEyPKv called 5 returned 100% blocks executed 67%
        5:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        5:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        5:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        5:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        5:  147-block  0
call    0 returned 5
        -:  148:      }
------------------
_ZNSt15__new_allocatorIwE8allocateEyPKv:
function _ZNSt15__new_allocatorIwE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara8TextFlow6ColumnEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch5clara8TextFlow6ColumnEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail5TokenEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch5clara6detail5TokenEE8allocateEyPKv called 213 returned 100% blocks executed 67%
      213:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      213:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
      213:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 213
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      213:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      213:  147-block  0
call    0 returned 213
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail11HelpColumnsEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch5clara6detail11HelpColumnsEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE8allocateEyPKv called 7 returned 100% blocks executed 67%
        7:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        7:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        7:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        7:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        7:  147-block  0
call    0 returned 7
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail3OptEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch5clara6detail3OptEE8allocateEyPKv called 94 returned 100% blocks executed 67%
       94:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       94:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       94:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 94
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       94:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       94:  147-block  0
call    0 returned 94
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch11MessageInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch11MessageInfoEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch14SectionEndInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch14SectionEndInfoEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch13ScopedMessageEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch13ScopedMessageEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN5Catch10ISingletonEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN5Catch10ISingletonEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt15__exception_ptr13exception_ptrEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt15__exception_ptr13exception_ptrEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIyE8allocateEyPKv:
function _ZNSt15__new_allocatorIyE8allocateEyPKv called 3 returned 100% blocks executed 67%
        3:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        3:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        3:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        3:  147-block  0
call    0 returned 3
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE8allocateEyPKv called 31 returned 100% blocks executed 67%
       31:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       31:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       31:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 31
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       31:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       31:  147-block  0
call    0 returned 31
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPKN5Catch8TestCaseEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPKN5Catch8TestCaseEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN5Catch8TestSpec6FilterEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN5Catch8TestSpec6FilterEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt8__detail6_StateIcEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt8__detail6_StateIcEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPlE8allocateEyPKv:
function _ZNSt15__new_allocatorIPlE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIlE8allocateEyPKv:
function _ZNSt15__new_allocatorIlE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairIccEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairIccEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EE8allocateEyPKv:
function _ZNSt15__new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE8allocateEyPKv called 7 returned 100% blocks executed 67%
        7:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        7:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        7:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        7:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        7:  147-block  0
call    0 returned 7
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 46 returned 100% blocks executed 67%
       46:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       46:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       46:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 46
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       46:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       46:  147-block  0
call    0 returned 46
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5SkillEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5SkillEEE8allocateEyPKv called 8 returned 100% blocks executed 67%
        8:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        8:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        8:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        8:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        8:  147-block  0
call    0 returned 8
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
        -:  149:
        -:  150:      // __p is not permitted to be a null pointer.
        -:  151:      void
    3579*:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    3579*:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEE10deallocateEPS9_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch13SummaryColumnEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch13SummaryColumnEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairIiiEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorISt4pairIiiEE10deallocateEPS1_y called 191 returned 100% blocks executed 100%
      191:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      191:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      191:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      191:  168-block  0
call    0 returned 191
        -:  169:      }
------------------
_ZNSt15__new_allocatorI7DungeonE10deallocateEPS0_y:
function _ZNSt15__new_allocatorI7DungeonE10deallocateEPS0_y called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorIwE10deallocateEPwy:
function _ZNSt15__new_allocatorIwE10deallocateEPwy called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPcE10deallocateEPS0_y:
function _ZNSt15__new_allocatorIPcE10deallocateEPS0_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt15__exception_ptr13exception_ptrEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorINSt15__exception_ptr13exception_ptrEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch11SectionInfoEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch11SectionInfoEE10deallocateEPS1_y called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch14AssertionStatsEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch14AssertionStatsEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt6vectorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEESaIS7_EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt6vectorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEESaIS7_EEE10deallocateEPS9_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEE10deallocateEPSB_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEE10deallocateEPSB_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEE10deallocateEPSD_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEE10deallocateEPSD_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIP5EnemyP4CeilEEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIP5EnemyP4CeilEEE10deallocateEPS7_y called 247 returned 100% blocks executed 100%
      247:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      247:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      247:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      247:  168-block  0
call    0 returned 247
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE10deallocateEPSE_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE10deallocateEPSE_y called 4 returned 100% blocks executed 100%
        4:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        4:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        4:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        4:  168-block  0
call    0 returned 4
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE10deallocateEPS5_y called 7 returned 100% blocks executed 100%
        7:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        7:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        7:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        7:  168-block  0
call    0 returned 7
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EEE10deallocateEPS9_y called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIyE10deallocateEPyy:
function _ZNSt15__new_allocatorIyE10deallocateEPyy called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorIcE10deallocateEPcy:
function _ZNSt15__new_allocatorIcE10deallocateEPcy called 1549 returned 100% blocks executed 100%
     1549:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
     1549:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
     1549:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     1549:  168-block  0
call    0 returned 1549
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_y called 1117 returned 100% blocks executed 100%
     1117:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
     1117:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
     1117:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     1117:  168-block  0
call    0 returned 1117
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE10deallocateEPS4_y:
function _ZNSt15__new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara8TextFlow6ColumnEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIN5Catch5clara8TextFlow6ColumnEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail5TokenEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIN5Catch5clara6detail5TokenEE10deallocateEPS3_y called 213 returned 100% blocks executed 100%
      213:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      213:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      213:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      213:  168-block  0
call    0 returned 213
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail11HelpColumnsEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIN5Catch5clara6detail11HelpColumnsEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail3OptEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIN5Catch5clara6detail3OptEE10deallocateEPS3_y called 94 returned 100% blocks executed 100%
       94:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       94:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       94:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       94:  168-block  0
call    0 returned 94
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch5clara6detail3ArgEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIN5Catch5clara6detail3ArgEE10deallocateEPS3_y called 2 returned 100% blocks executed 100%
        2:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        2:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  168-block  0
call    0 returned 2
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch8TestSpec6FilterEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIN5Catch8TestSpec6FilterEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch9StringRefEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch9StringRefEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairIiN5Catch9StringRefEEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorISt4pairIiN5Catch9StringRefEEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE10deallocateEPS3_y called 7 returned 100% blocks executed 100%
        7:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        7:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        7:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        7:  168-block  0
call    0 returned 7
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch11MessageInfoEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch11MessageInfoEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch13ScopedMessageEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch13ScopedMessageEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch14SectionEndInfoEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch14SectionEndInfoEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE10deallocateEPS3_y called 2 returned 100% blocks executed 100%
        2:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        2:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  168-block  0
call    0 returned 2
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch8TestSpec11FilterMatchEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIN5Catch8TestSpec11FilterMatchEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN5Catch10ISingletonEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIPN5Catch10ISingletonEE10deallocateEPS2_y called 2 returned 100% blocks executed 100%
        2:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        2:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  168-block  0
call    0 returned 2
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN5Catch8TestCaseEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN5Catch8TestCaseEE10deallocateEPS1_y called 5 returned 100% blocks executed 100%
        5:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        5:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        5:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        5:  168-block  0
call    0 returned 5
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairIyPKN5Catch8TestCaseEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorISt4pairIyPKN5Catch8TestCaseEEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE10deallocateEPS4_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE10deallocateEPS4_y called 31 returned 100% blocks executed 100%
       31:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       31:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       31:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       31:  168-block  0
call    0 returned 31
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPKN5Catch8TestCaseEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIPKN5Catch8TestCaseEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE10deallocateEPS4_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 2 returned 100% blocks executed 100%
        2:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        2:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  168-block  0
call    0 returned 2
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 2 returned 100% blocks executed 100%
        2:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        2:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  168-block  0
call    0 returned 2
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSA_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE10deallocateEPSH_y:
function _ZNSt15__new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE10deallocateEPSH_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt8__detail6_StateIcEEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorINSt8__detail6_StateIcEEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPlE10deallocateEPS0_y:
function _ZNSt15__new_allocatorIPlE10deallocateEPS0_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairIccEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorISt4pairIccEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_EE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIlE10deallocateEPly:
function _ZNSt15__new_allocatorIlE10deallocateEPly called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE10deallocateEPS4_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE10deallocateEPS3_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5SkillEEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5SkillEEE10deallocateEPSC_y called 8 returned 100% blocks executed 100%
        8:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        8:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        8:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        8:  168-block  0
call    0 returned 8
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSA_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSA_y called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSF_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSF_y called 3 returned 100% blocks executed 100%
        3:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        3:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        3:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        3:  168-block  0
call    0 returned 3
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS8_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS8_y called 11 returned 100% blocks executed 100%
       11:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       11:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       11:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       11:  168-block  0
call    0 returned 11
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS6_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y called 46 returned 100% blocks executed 100%
       46:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       46:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       46:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       46:  168-block  0
call    0 returned 46
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSG_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSG_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE_EESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSI_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSI_y called 2 returned 100% blocks executed 100%
        2:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        2:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        2:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        2:  168-block  0
call    0 returned 2
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSE_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSE_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
        -:  170:
        -:  171:#undef _GLIBCXX_SIZED_DEALLOC
        -:  172:#undef _GLIBCXX_OPERATOR_DELETE
        -:  173:#undef _GLIBCXX_OPERATOR_NEW
        -:  174:
        -:  175:#if __cplusplus <= 201703L
        -:  176:      __attribute__((__always_inline__))
        -:  177:      size_type
        -:  178:      max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  179:      { return _M_max_size(); }
        -:  180:
        -:  181:#if __cplusplus >= 201103L
        -:  182:      template<typename _Up, typename... _Args>
        -:  183:	__attribute__((__always_inline__))
        -:  184:	void
        -:  185:	construct(_Up* __p, _Args&&... __args)
        -:  186:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        -:  187:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        -:  188:
        -:  189:      template<typename _Up>
        -:  190:	__attribute__((__always_inline__))
        -:  191:	void
        -:  192:	destroy(_Up* __p)
        -:  193:	noexcept(std::is_nothrow_destructible<_Up>::value)
        -:  194:	{ __p->~_Up(); }
        -:  195:#else
        -:  196:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  197:      // 402. wrong new expression in [some_] allocator::construct
        -:  198:      __attribute__((__always_inline__))
        -:  199:      void
        -:  200:      construct(pointer __p, const _Tp& __val)
        -:  201:      { ::new((void *)__p) _Tp(__val); }
        -:  202:
        -:  203:      __attribute__((__always_inline__))
        -:  204:      void
        -:  205:      destroy(pointer __p) { __p->~_Tp(); }
        -:  206:#endif
        -:  207:#endif // ! C++20
        -:  208:
        -:  209:      template<typename _Up>
        -:  210:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  211:	operator==(const __new_allocator&, const __new_allocator<_Up>&)
        -:  212:	_GLIBCXX_NOTHROW
        -:  213:	{ return true; }
        -:  214:
        -:  215:#if __cpp_impl_three_way_comparison < 201907L
        -:  216:      template<typename _Up>
        -:  217:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  218:	operator!=(const __new_allocator&, const __new_allocator<_Up>&)
        -:  219:	_GLIBCXX_NOTHROW
        -:  220:	{ return false; }
        -:  221:#endif
        -:  222:
        -:  223:    private:
        -:  224:      __attribute__((__always_inline__))
        -:  225:      _GLIBCXX_CONSTEXPR size_type
        -:  226:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  227:      {
        -:  228:#if __PTRDIFF_MAX__ < __SIZE_MAX__
    3537*:  229:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    %%%%%:  229-block  0
    %%%%%:  229-block  1
    %%%%%:  229-block  2
    %%%%%:  229-block  3
    %%%%%:  229-block  4
    %%%%%:  229-block  5
    %%%%%:  229-block  6
    %%%%%:  229-block  7
    %%%%%:  229-block  8
    %%%%%:  229-block  9
    %%%%%:  229-block 10
    %%%%%:  229-block 11
    %%%%%:  229-block 12
    %%%%%:  229-block 13
    %%%%%:  229-block 14
        1:  229-block 15
    %%%%%:  229-block 16
        1:  229-block 17
        2:  229-block 18
        1:  229-block 19
        1:  229-block 20
        1:  229-block 21
        1:  229-block 22
        1:  229-block 23
        1:  229-block 24
        2:  229-block 25
        1:  229-block 26
        1:  229-block 27
        1:  229-block 28
        1:  229-block 29
        1:  229-block 30
        1:  229-block 31
    %%%%%:  229-block 32
    %%%%%:  229-block 33
        1:  229-block 34
        1:  229-block 35
        7:  229-block 36
    %%%%%:  229-block 37
        2:  229-block 38
        1:  229-block 39
        1:  229-block 40
        8:  229-block 41
    %%%%%:  229-block 42
    %%%%%:  229-block 43
    %%%%%:  229-block 44
       46:  229-block 45
    %%%%%:  229-block 46
        1:  229-block 47
        7:  229-block 48
    %%%%%:  229-block 49
        4:  229-block 50
    %%%%%:  229-block 51
       11:  229-block 52
        3:  229-block 53
        3:  229-block 54
      247:  229-block 55
    %%%%%:  229-block 56
    %%%%%:  229-block 57
    %%%%%:  229-block 58
    %%%%%:  229-block 59
    %%%%%:  229-block 60
    %%%%%:  229-block 61
        3:  229-block 62
    %%%%%:  229-block 63
        3:  229-block 64
        2:  229-block 65
    %%%%%:  229-block 66
    %%%%%:  229-block 67
    %%%%%:  229-block 68
        3:  229-block 69
      191:  229-block 70
    %%%%%:  229-block 71
    %%%%%:  229-block 72
    %%%%%:  229-block 73
    %%%%%:  229-block 74
       31:  229-block 75
        3:  229-block 76
    %%%%%:  229-block 77
        2:  229-block 78
    %%%%%:  229-block 79
    %%%%%:  229-block 80
    %%%%%:  229-block 81
    %%%%%:  229-block 82
       94:  229-block 83
        2:  229-block 84
    %%%%%:  229-block 85
      213:  229-block 86
    %%%%%:  229-block 87
    %%%%%:  229-block 88
        5:  229-block 89
    %%%%%:  229-block 90
    %%%%%:  229-block 91
    %%%%%:  229-block 92
    %%%%%:  229-block 93
     1119:  229-block 94
     1505:  229-block 95
        -:  230:#else
        -:  231:	return std::size_t(-1) / sizeof(_Tp);
        -:  232:#endif
        -:  233:      }
        -:  234:    };
        -:  235:
        -:  236:_GLIBCXX_END_NAMESPACE_VERSION
        -:  237:} // namespace
        -:  238:
        -:  239:#endif
