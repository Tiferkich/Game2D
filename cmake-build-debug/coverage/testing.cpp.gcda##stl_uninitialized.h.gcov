        -:    0:Source:C:/Program Files/JetBrains/CLion 2023.2.2/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/stl_uninitialized.h
        -:    0:Graph:C:\Users\sakhd\CLionProjects\gameLab3\cmake-build-debug\Tests\CMakeFiles\tests.dir\testing.cpp.gcno
        -:    0:Data:C:\Users\sakhd\CLionProjects\gameLab3\cmake-build-debug\Tests\CMakeFiles\tests.dir\testing.cpp.gcda
        -:    0:Runs:1
        -:    1:// Raw memory manipulators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1994
        -:   28: * Hewlett-Packard Company
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1996,1997
        -:   40: * Silicon Graphics Computer Systems, Inc.
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Silicon Graphics makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: */
        -:   50:
        -:   51:/** @file bits/stl_uninitialized.h
        -:   52: *  This is an internal header file, included by other library headers.
        -:   53: *  Do not attempt to use it directly. @headername{memory}
        -:   54: */
        -:   55:
        -:   56:#ifndef _STL_UNINITIALIZED_H
        -:   57:#define _STL_UNINITIALIZED_H 1
        -:   58:
        -:   59:#if __cplusplus >= 201103L
        -:   60:#include <type_traits>
        -:   61:#endif
        -:   62:
        -:   63:#include <bits/stl_algobase.h>    // copy
        -:   64:#include <ext/alloc_traits.h>     // __alloc_traits
        -:   65:
        -:   66:#if __cplusplus >= 201703L
        -:   67:#include <bits/stl_pair.h>
        -:   68:#endif
        -:   69:
        -:   70:namespace std _GLIBCXX_VISIBILITY(default)
        -:   71:{
        -:   72:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   73:
        -:   74:  /** @addtogroup memory
        -:   75:   *  @{
        -:   76:   */
        -:   77:
        -:   78:  /// @cond undocumented
        -:   79:
        -:   80:#if __cplusplus >= 201103L
        -:   81:  template<typename _ValueType, typename _Tp>
        -:   82:    constexpr bool
        -:   83:    __check_constructible()
        -:   84:    {
        -:   85:      // Trivial types can have deleted constructors, but std::copy etc.
        -:   86:      // only use assignment (or memmove) not construction, so we need an
        -:   87:      // explicit check that construction from _Tp is actually valid,
        -:   88:      // otherwise some ill-formed uses of std::uninitialized_xxx would
        -:   89:      // compile without errors. This gives a nice clear error message.
        -:   90:      static_assert(is_constructible<_ValueType, _Tp>::value,
        -:   91:	  "result type must be constructible from input type");
        -:   92:
        -:   93:      return true;
        -:   94:    }
        -:   95:
        -:   96:// If the type is trivial we don't need to construct it, just assign to it.
        -:   97:// But trivial types can still have deleted or inaccessible assignment,
        -:   98:// so don't try to use std::copy or std::fill etc. if we can't assign.
        -:   99:# define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
        -:  100:    __is_trivial(T) && __is_assignable(T&, U) \
        -:  101:    && std::__check_constructible<T, U>()
        -:  102:#else
        -:  103:// No need to check if is_constructible<T, U> for C++98. Trivial types have
        -:  104:// no user-declared constructors, so if the assignment is valid, construction
        -:  105:// should be too.
        -:  106:# define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
        -:  107:    __is_trivial(T) && __is_assignable(T&, U)
        -:  108:#endif
        -:  109:
        -:  110:  template<typename _InputIterator, typename _ForwardIterator>
        -:  111:    _GLIBCXX20_CONSTEXPR
        -:  112:    _ForwardIterator
    1749*:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    1749*:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    5001*:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    3252*:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    1749*:  121:	  return __cur;
        -:  122:	}
    =====:  123:      __catch(...)
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
    =====:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 66 returned 100% blocks executed 69%
       66:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
       66:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
       67:  119:	  for (; __first != __last; ++__first, (void)++__cur)
       66:  119-block  0
        1:  119-block  1
call    0 returned 1
       67:  119-block  2
call    1 returned 67
branch  2 taken 1
branch  3 taken 66 (fallthrough)
        1:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
        1:  120-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
       66:  121:	  return __cur;
       66:  121-block  0
       66:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET0_T_SC_SB_:
function _ZSt16__do_uninit_copyIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET0_T_SC_SB_ called 3 returned 100% blocks executed 62%
        3:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
        3:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
       18:  119:	  for (; __first != __last; ++__first, (void)++__cur)
        3:  119-block  0
       15:  119-block  1
       18:  119-block  2
branch  0 taken 15
branch  1 taken 3 (fallthrough)
       15:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
       15:  120-block  0
call    0 returned 15
call    1 returned 15
branch  2 taken 15 (fallthrough)
branch  3 taken 0 (throw)
        3:  121:	  return __cur;
        3:  121-block  0
        3:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
call    0 never executed
    %%%%%:  119-block  2
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 217 returned 100% blocks executed 69%
      217:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
      217:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
      429:  119:	  for (; __first != __last; ++__first, (void)++__cur)
      217:  119-block  0
      212:  119-block  1
call    0 returned 212
      429:  119-block  2
call    1 returned 429
branch  2 taken 212
branch  3 taken 217 (fallthrough)
      212:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
      212:  120-block  0
call    0 returned 212
call    1 returned 212
call    2 returned 212
branch  3 taken 212 (fallthrough)
branch  4 taken 0 (throw)
      217:  121:	  return __cur;
      217:  121-block  0
      217:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_ET0_T_SG_SF_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_ET0_T_SG_SF_ called 1134 returned 100% blocks executed 69%
     1134:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
     1134:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
     3126:  119:	  for (; __first != __last; ++__first, (void)++__cur)
     1134:  119-block  0
     1992:  119-block  1
call    0 returned 1992
     3126:  119-block  2
call    1 returned 3126
branch  2 taken 1992
branch  3 taken 1134 (fallthrough)
     1992:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
     1992:  120-block  0
call    0 returned 1992
call    1 returned 1992
call    2 returned 1992
branch  3 taken 1992 (fallthrough)
branch  4 taken 0 (throw)
     1134:  121:	  return __cur;
     1134:  121-block  0
     1134:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_ called 260 returned 100% blocks executed 38%
      260:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
      260:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
     260*:  119:	  for (; __first != __last; ++__first, (void)++__cur)
      260:  119-block  0
    %%%%%:  119-block  1
call    0 never executed
      260:  119-block  2
call    1 returned 260
branch  2 taken 0
branch  3 taken 260 (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
      260:  121:	  return __cur;
      260:  121-block  0
      260:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_:
function _ZSt16__do_uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPN5Catch5clara6detail3OptES4_ET0_T_S6_S5_:
function _ZSt16__do_uninit_copyIPN5Catch5clara6detail3OptES4_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPN5Catch5clara6detail3ArgES4_ET0_T_S6_S5_:
function _ZSt16__do_uninit_copyIPN5Catch5clara6detail3ArgES4_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_ called 1 returned 100% blocks executed 69%
        1:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
        1:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
        8:  119:	  for (; __first != __last; ++__first, (void)++__cur)
        1:  119-block  0
        7:  119-block  1
call    0 returned 7
        8:  119-block  2
call    1 returned 8
branch  2 taken 7
branch  3 taken 1 (fallthrough)
        7:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
        7:  120-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        1:  121:	  return __cur;
        1:  121-block  0
        1:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS4_SaIS4_EEEEPS4_ET0_T_SD_SC_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS4_SaIS4_EEEEPS4_ET0_T_SD_SC_ called 1 returned 100% blocks executed 38%
        1:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
        1:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
       1*:  119:	  for (; __first != __last; ++__first, (void)++__cur)
        1:  119-block  0
    %%%%%:  119-block  1
call    0 never executed
        1:  119-block  2
call    1 returned 1
branch  2 taken 0
branch  3 taken 1 (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        1:  121:	  return __cur;
        1:  121-block  0
        1:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIP7DungeonS1_ET0_T_S3_S2_:
function _ZSt16__do_uninit_copyIP7DungeonS1_ET0_T_S3_S2_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_:
function _ZSt16__do_uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPKN5Catch5clara6detail11HelpColumnsEPS3_ET0_T_S8_S7_:
function _ZSt16__do_uninit_copyIPKN5Catch5clara6detail11HelpColumnsEPS3_ET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 66 returned 100% blocks executed 69%
       66:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
       66:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
     1089:  119:	  for (; __first != __last; ++__first, (void)++__cur)
       66:  119-block  0
     1023:  119-block  1
call    0 returned 1023
     1089:  119-block  2
call    1 returned 1089
branch  2 taken 1023
branch  3 taken 66 (fallthrough)
     1023:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
     1023:  120-block  0
call    0 returned 1023
call    1 returned 1023
call    2 returned 1023
branch  3 taken 1023 (fallthrough)
branch  4 taken 0 (throw)
       66:  121:	  return __cur;
       66:  121-block  0
       66:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPcS0_ET0_T_S2_S1_:
function _ZSt16__do_uninit_copyIPcS0_ET0_T_S2_S1_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS5_SaIS5_EEEES6_ET0_T_SC_SB_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS5_SaIS5_EEEES6_ET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
call    0 never executed
    %%%%%:  119-block  2
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS2_ET0_T_S7_S6_:
function _ZSt16__do_uninit_copyIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS2_ET0_T_S7_S6_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_ called 1 returned 100% blocks executed 69%
        1:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
        1:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
        3:  119:	  for (; __first != __last; ++__first, (void)++__cur)
        1:  119-block  0
        2:  119-block  1
call    0 returned 2
        3:  119-block  2
call    1 returned 3
branch  2 taken 2
branch  3 taken 1 (fallthrough)
        2:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
        2:  120-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        1:  121:	  return __cur;
        1:  121-block  0
        1:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES5_ET0_T_S8_S7_:
function _ZSt16__do_uninit_copyISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES5_ET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyISt13move_iteratorIPN5Catch13ScopedMessageEES3_ET0_T_S6_S5_:
function _ZSt16__do_uninit_copyISt13move_iteratorIPN5Catch13ScopedMessageEES3_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
call    0 never executed
    %%%%%:  119-block  2
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_:
function _ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS6_SaIS6_EEEEPS6_ET0_T_SF_SE_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS6_SaIS6_EEEEPS6_ET0_T_SF_SE_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPKN5Catch14AssertionStatsEPS1_ET0_T_S6_S5_:
function _ZSt16__do_uninit_copyIPKN5Catch14AssertionStatsEPS1_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESD_ET0_T_SF_SE_:
function _ZSt16__do_uninit_copyIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESD_ET0_T_SF_SE_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS1_IPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISC_SaISC_EEEEPSC_ET0_T_SL_SK_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS1_IPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISC_SaISC_EEEEPSC_ET0_T_SL_SK_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIPKcPcET0_T_S4_S3_:
function _ZSt16__do_uninit_copyIPKcPcET0_T_S4_S3_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
call    0 never executed
    %%%%%:  119-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
        -:  122:	}
        -:  123:      __catch(...)
        -:  124:	{
        -:  125:	  std::_Destroy(__result, __cur);
        -:  126:	  __throw_exception_again;
        -:  127:	}
        -:  128:    }
------------------
_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_:
function _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_ called 0 returned 0% blocks executed 0%
    #####:  113:    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  114:		     _ForwardIterator __result)
        -:  115:    {
    #####:  116:      _ForwardIterator __cur = __result;
        -:  117:      __try
        -:  118:	{
    #####:  119:	  for (; __first != __last; ++__first, (void)++__cur)
    %%%%%:  119-block  0
    %%%%%:  119-block  1
call    0 never executed
    %%%%%:  119-block  2
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####:  120:	    std::_Construct(std::__addressof(*__cur), *__first);
    %%%%%:  120-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####:  121:	  return __cur;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:	}
    =====:  123:      __catch(...)
    $$$$$:  123-block  0
    $$$$$:  123-block  1
call    0 never executed
    $$$$$:  123-block  2
call    1 never executed
        -:  124:	{
    =====:  125:	  std::_Destroy(__result, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  126:	  __throw_exception_again;
    $$$$$:  126-block  0
call    0 never executed
        -:  127:	}
        -:  128:    }
------------------
        -:  129:
        -:  130:  template<bool _TrivialValueTypes>
        -:  131:    struct __uninitialized_copy
        -:  132:    {
        -:  133:      template<typename _InputIterator, typename _ForwardIterator>
        -:  134:        static _ForwardIterator
    1749*:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    1749*:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_ called 66 returned 100% blocks executed 100%
       66:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
       66:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
       66:  137-block  0
call    0 returned 66
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET0_T_SE_SD_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET0_T_SE_SD_ called 3 returned 100% blocks executed 100%
        3:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
        3:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
        3:  137-block  0
call    0 returned 3
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_ called 217 returned 100% blocks executed 100%
      217:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
      217:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
      217:  137-block  0
call    0 returned 217
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS9_SaIS9_EEEEPS9_EET0_T_SI_SH_ called 1134 returned 100% blocks executed 100%
     1134:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
     1134:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
     1134:  137-block  0
call    0 returned 1134
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_ called 260 returned 100% blocks executed 100%
      260:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
      260:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
      260:  137-block  0
call    0 returned 260
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EET0_T_SA_S9_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_EET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN5Catch5clara6detail3OptES6_EET0_T_S8_S7_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN5Catch5clara6detail3OptES6_EET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN5Catch5clara6detail3ArgES6_EET0_T_S8_S7_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN5Catch5clara6detail3ArgES6_EET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_ called 1 returned 100% blocks executed 100%
        1:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
        1:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
        1:  137-block  0
call    0 returned 1
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS6_SaIS6_EEEEPS6_EET0_T_SF_SE_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS6_SaIS6_EEEEPS6_EET0_T_SF_SE_ called 1 returned 100% blocks executed 100%
        1:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
        1:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
        1:  137-block  0
call    0 returned 1
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIP7DungeonS3_EET0_T_S5_S4_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIP7DungeonS3_EET0_T_S5_S4_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN5Catch5clara6detail11HelpColumnsEPS5_EET0_T_SA_S9_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN5Catch5clara6detail11HelpColumnsEPS5_EET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ESt6vectorISB_SaISB_EEEEPSB_EET0_T_SK_SJ_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_ called 66 returned 100% blocks executed 100%
       66:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
       66:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
       66:  137-block  0
call    0 returned 66
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS7_SaIS7_EEEES8_EET0_T_SE_SD_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS7_SaIS7_EEEES8_EET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS4_EET0_T_S9_S8_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS4_EET0_T_S9_S8_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_ called 1 returned 100% blocks executed 100%
        1:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
        1:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
        1:  137-block  0
call    0 returned 1
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES7_EET0_T_SA_S9_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES7_EET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN5Catch13ScopedMessageEES5_EET0_T_S8_S7_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPN5Catch13ScopedMessageEES5_EET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS8_SaIS8_EEEEPS8_EET0_T_SH_SG_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS8_SaIS8_EEEEPS8_EET0_T_SH_SG_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN5Catch14AssertionStatsEPS3_EET0_T_S8_S7_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN5Catch14AssertionStatsEPS3_EET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESF_EET0_T_SH_SG_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESF_EET0_T_SH_SG_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS3_IPKcNS4_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISE_SaISE_EEEEPSE_EET0_T_SN_SM_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS3_IPKcNS4_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISE_SaISE_EEEEPSE_EET0_T_SN_SM_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_:
function _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_ called 0 returned 0% blocks executed 0%
    #####:  135:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  136:		      _ForwardIterator __result)
    #####:  137:	{ return std::__do_uninit_copy(__first, __last, __result); }
    %%%%%:  137-block  0
call    0 never executed
------------------
        -:  138:    };
        -:  139:
        -:  140:  template<>
        -:  141:    struct __uninitialized_copy<true>
        -:  142:    {
        -:  143:      template<typename _InputIterator, typename _ForwardIterator>
        -:  144:        static _ForwardIterator
    #####:  145:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  146:		      _ForwardIterator __result)
    #####:  147:        { return std::copy(__first, __last, __result); }
------------------
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_:
function _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_ called 0 returned 0% blocks executed 0%
    #####:  145:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  146:		      _ForwardIterator __result)
    #####:  147:        { return std::copy(__first, __last, __result); }
    %%%%%:  147-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_:
function _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  145:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  146:		      _ForwardIterator __result)
    #####:  147:        { return std::copy(__first, __last, __result); }
    %%%%%:  147-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_:
function _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  145:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  146:		      _ForwardIterator __result)
    #####:  147:        { return std::copy(__first, __last, __result); }
    %%%%%:  147-block  0
call    0 never executed
------------------
_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_:
function _ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_ called 0 returned 0% blocks executed 0%
    #####:  145:        __uninit_copy(_InputIterator __first, _InputIterator __last,
        -:  146:		      _ForwardIterator __result)
    #####:  147:        { return std::copy(__first, __last, __result); }
    %%%%%:  147-block  0
call    0 never executed
------------------
        -:  148:    };
        -:  149:
        -:  150:  /// @endcond
        -:  151:
        -:  152:  /**
        -:  153:   *  @brief Copies the range [first,last) into result.
        -:  154:   *  @param  __first  An input iterator.
        -:  155:   *  @param  __last   An input iterator.
        -:  156:   *  @param  __result An output iterator.
        -:  157:   *  @return   __result + (__first - __last)
        -:  158:   *
        -:  159:   *  Like copy(), but does not require an initialized output range.
        -:  160:  */
        -:  161:  template<typename _InputIterator, typename _ForwardIterator>
        -:  162:    inline _ForwardIterator
    1749*:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    1749*:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    1749*:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    1749*:  185:	__uninit_copy(__first, __last, __result);
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 66 returned 100% blocks executed 100%
       66:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
       66:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
       66:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
       66:  185:	__uninit_copy(__first, __last, __result);
       66:  185-block  0
call    0 returned 66
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET0_T_SC_SB_:
function _ZSt18uninitialized_copyIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET0_T_SC_SB_ called 3 returned 100% blocks executed 100%
        3:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
        3:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
        3:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
        3:  185:	__uninit_copy(__first, __last, __result);
        3:  185-block  0
call    0 returned 3
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 217 returned 100% blocks executed 100%
      217:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
      217:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
      217:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
      217:  185:	__uninit_copy(__first, __last, __result);
      217:  185-block  0
call    0 returned 217
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_ET0_T_SG_SF_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_ET0_T_SG_SF_ called 1134 returned 100% blocks executed 100%
     1134:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
     1134:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
     1134:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
     1134:  185:	__uninit_copy(__first, __last, __result);
     1134:  185-block  0
call    0 returned 1134
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_ called 260 returned 100% blocks executed 100%
      260:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
      260:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
      260:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
      260:  185:	__uninit_copy(__first, __last, __result);
      260:  185-block  0
call    0 returned 260
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_:
function _ZSt18uninitialized_copyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPN5Catch5clara6detail3OptES4_ET0_T_S6_S5_:
function _ZSt18uninitialized_copyIPN5Catch5clara6detail3OptES4_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPN5Catch5clara6detail3ArgES4_ET0_T_S6_S5_:
function _ZSt18uninitialized_copyIPN5Catch5clara6detail3ArgES4_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_ called 1 returned 100% blocks executed 100%
        1:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
        1:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
        1:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
        1:  185:	__uninit_copy(__first, __last, __result);
        1:  185-block  0
call    0 returned 1
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS4_SaIS4_EEEEPS4_ET0_T_SD_SC_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS4_SaIS4_EEEEPS4_ET0_T_SD_SC_ called 1 returned 100% blocks executed 100%
        1:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
        1:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
        1:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
        1:  185:	__uninit_copy(__first, __last, __result);
        1:  185-block  0
call    0 returned 1
        -:  186:    }
------------------
_ZSt18uninitialized_copyIP7DungeonS1_ET0_T_S3_S2_:
function _ZSt18uninitialized_copyIP7DungeonS1_ET0_T_S3_S2_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_:
function _ZSt18uninitialized_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_ET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPKN5Catch5clara6detail11HelpColumnsEPS3_ET0_T_S8_S7_:
function _ZSt18uninitialized_copyIPKN5Catch5clara6detail11HelpColumnsEPS3_ET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 66 returned 100% blocks executed 100%
       66:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
       66:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
       66:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
       66:  185:	__uninit_copy(__first, __last, __result);
       66:  185-block  0
call    0 returned 66
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_:
function _ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS5_SaIS5_EEEES6_ET0_T_SC_SB_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS5_SaIS5_EEEES6_ET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS2_ET0_T_S7_S6_:
function _ZSt18uninitialized_copyIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS2_ET0_T_S7_S6_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_ called 1 returned 100% blocks executed 100%
        1:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
        1:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
        1:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
        1:  185:	__uninit_copy(__first, __last, __result);
        1:  185-block  0
call    0 returned 1
        -:  186:    }
------------------
_ZSt18uninitialized_copyISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES5_ET0_T_S8_S7_:
function _ZSt18uninitialized_copyISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES5_ET0_T_S8_S7_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyISt13move_iteratorIPN5Catch13ScopedMessageEES3_ET0_T_S6_S5_:
function _ZSt18uninitialized_copyISt13move_iteratorIPN5Catch13ScopedMessageEES3_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_:
function _ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS6_SaIS6_EEEEPS6_ET0_T_SF_SE_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS6_SaIS6_EEEEPS6_ET0_T_SF_SE_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPKN5Catch14AssertionStatsEPS1_ET0_T_S6_S5_:
function _ZSt18uninitialized_copyIPKN5Catch14AssertionStatsEPS1_ET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESD_ET0_T_SF_SE_:
function _ZSt18uninitialized_copyIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESD_ET0_T_SF_SE_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS1_IPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISC_SaISC_EEEEPSC_ET0_T_SL_SK_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS1_IPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISC_SaISC_EEEEPSC_ET0_T_SL_SK_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_:
function _ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_:
function _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ESt6vectorIS9_SaIS9_EEEEPS9_ET0_T_SI_SH_ called 0 returned 0% blocks executed 0%
    #####:  163:    uninitialized_copy(_InputIterator __first, _InputIterator __last,
        -:  164:		       _ForwardIterator __result)
        -:  165:    {
        -:  166:      typedef typename iterator_traits<_InputIterator>::value_type
        -:  167:	_ValueType1;
        -:  168:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  169:	_ValueType2;
        -:  170:
        -:  171:      // _ValueType1 must be trivially-copyable to use memmove, so don't
        -:  172:      // bother optimizing to std::copy if it isn't.
        -:  173:      // XXX Unnecessary because std::copy would check it anyway?
    #####:  174:      const bool __can_memmove = __is_trivial(_ValueType1);
        -:  175:
        -:  176:#if __cplusplus < 201103L
        -:  177:      typedef typename iterator_traits<_InputIterator>::reference _From;
        -:  178:#else
        -:  179:      using _From = decltype(*__first);
        -:  180:#endif
    #####:  181:      const bool __assignable
        -:  182:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
        -:  183:
        -:  184:      return std::__uninitialized_copy<__can_memmove && __assignable>::
    #####:  185:	__uninit_copy(__first, __last, __result);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:    }
------------------
        -:  187:
        -:  188:  /// @cond undocumented
        -:  189:
        -:  190:  template<typename _ForwardIterator, typename _Tp>
        -:  191:    _GLIBCXX20_CONSTEXPR void
        -:  192:    __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        -:  193:		     const _Tp& __x)
        -:  194:    {
        -:  195:      _ForwardIterator __cur = __first;
        -:  196:      __try
        -:  197:	{
        -:  198:	  for (; __cur != __last; ++__cur)
        -:  199:	    std::_Construct(std::__addressof(*__cur), __x);
        -:  200:	}
        -:  201:      __catch(...)
        -:  202:	{
        -:  203:	  std::_Destroy(__first, __cur);
        -:  204:	  __throw_exception_again;
        -:  205:	}
        -:  206:    }
        -:  207:
        -:  208:  template<bool _TrivialValueType>
        -:  209:    struct __uninitialized_fill
        -:  210:    {
        -:  211:      template<typename _ForwardIterator, typename _Tp>
        -:  212:        static void
        -:  213:        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        -:  214:		      const _Tp& __x)
        -:  215:	{ std::__do_uninit_fill(__first, __last, __x); }
        -:  216:    };
        -:  217:
        -:  218:  template<>
        -:  219:    struct __uninitialized_fill<true>
        -:  220:    {
        -:  221:      template<typename _ForwardIterator, typename _Tp>
        -:  222:        static void
        -:  223:        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        -:  224:		      const _Tp& __x)
        -:  225:        { std::fill(__first, __last, __x); }
        -:  226:    };
        -:  227:
        -:  228:  /// @endcond
        -:  229:
        -:  230:  /**
        -:  231:   *  @brief Copies the value x into the range [first,last).
        -:  232:   *  @param  __first  An input iterator.
        -:  233:   *  @param  __last   An input iterator.
        -:  234:   *  @param  __x      The source value.
        -:  235:   *  @return   Nothing.
        -:  236:   *
        -:  237:   *  Like fill(), but does not require an initialized output range.
        -:  238:  */
        -:  239:  template<typename _ForwardIterator, typename _Tp>
        -:  240:    inline void
        -:  241:    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
        -:  242:		       const _Tp& __x)
        -:  243:    {
        -:  244:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  245:	_ValueType;
        -:  246:
        -:  247:      // Trivial types do not need a constructor to begin their lifetime,
        -:  248:      // so try to use std::fill to benefit from its memset optimization.
        -:  249:      const bool __can_fill
        -:  250:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType, const _Tp&);
        -:  251:
        -:  252:      std::__uninitialized_fill<__can_fill>::
        -:  253:	__uninit_fill(__first, __last, __x);
        -:  254:    }
        -:  255:
        -:  256:  /// @cond undocumented
        -:  257:
        -:  258:  template<typename _ForwardIterator, typename _Size, typename _Tp>
        -:  259:    _GLIBCXX20_CONSTEXPR
        -:  260:    _ForwardIterator
function _ZSt18__do_uninit_fill_nIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEySC_ET_SE_T0_RKT1_ called 0 returned 0% blocks executed 0%
    #####:  261:    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
        -:  262:    {
    #####:  263:      _ForwardIterator __cur = __first;
        -:  264:      __try
        -:  265:	{
    #####:  266:	  for (; __n > 0; --__n, (void) ++__cur)
    %%%%%:  266-block  0
    %%%%%:  266-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  267:	    std::_Construct(std::__addressof(*__cur), __x);
    %%%%%:  267-block  0
call    0 never executed
call    1 never executed
    #####:  268:	  return __cur;
    %%%%%:  268-block  0
        -:  269:	}
        -:  270:      __catch(...)
        -:  271:	{
        -:  272:	  std::_Destroy(__first, __cur);
        -:  273:	  __throw_exception_again;
        -:  274:	}
        -:  275:    }
        -:  276:
        -:  277:  template<bool _TrivialValueType>
        -:  278:    struct __uninitialized_fill_n
        -:  279:    {
        -:  280:      template<typename _ForwardIterator, typename _Size, typename _Tp>
        -:  281:	static _ForwardIterator
function _ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEySE_EET_SG_T0_RKT1_ called 0 returned 0% blocks executed 0%
    #####:  282:        __uninit_fill_n(_ForwardIterator __first, _Size __n,
        -:  283:			const _Tp& __x)
    #####:  284:	{ return std::__do_uninit_fill_n(__first, __n, __x); }
    %%%%%:  284-block  0
call    0 never executed
        -:  285:    };
        -:  286:
        -:  287:  template<>
        -:  288:    struct __uninitialized_fill_n<true>
        -:  289:    {
        -:  290:      template<typename _ForwardIterator, typename _Size, typename _Tp>
        -:  291:	static _ForwardIterator
        -:  292:        __uninit_fill_n(_ForwardIterator __first, _Size __n,
        -:  293:			const _Tp& __x)
        -:  294:        { return std::fill_n(__first, __n, __x); }
        -:  295:    };
        -:  296:
        -:  297:  /// @endcond
        -:  298:
        -:  299:   // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  300:   // DR 1339. uninitialized_fill_n should return the end of its range
        -:  301:  /**
        -:  302:   *  @brief Copies the value x into the range [first,first+n).
        -:  303:   *  @param  __first  An input iterator.
        -:  304:   *  @param  __n      The number of copies to make.
        -:  305:   *  @param  __x      The source value.
        -:  306:   *  @return   Nothing.
        -:  307:   *
        -:  308:   *  Like fill_n(), but does not require an initialized output range.
        -:  309:  */
        -:  310:  template<typename _ForwardIterator, typename _Size, typename _Tp>
        -:  311:    inline _ForwardIterator
function _ZSt20uninitialized_fill_nIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEySC_ET_SE_T0_RKT1_ called 0 returned 0% blocks executed 0%
    #####:  312:    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
        -:  313:    {
        -:  314:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  315:	_ValueType;
        -:  316:
        -:  317:      // Trivial types do not need a constructor to begin their lifetime,
        -:  318:      // so try to use std::fill_n to benefit from its optimizations.
    #####:  319:      const bool __can_fill
        -:  320:	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType, const _Tp&)
        -:  321:      // For arbitrary class types and floating point types we can't assume
        -:  322:      // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
        -:  323:      // so only use std::fill_n when _Size is already an integral type.
        -:  324:	&& __is_integer<_Size>::__value;
        -:  325:
        -:  326:      return __uninitialized_fill_n<__can_fill>::
    #####:  327:	__uninit_fill_n(__first, __n, __x);
    %%%%%:  327-block  0
call    0 never executed
        -:  328:    }
        -:  329:
        -:  330:#undef _GLIBCXX_USE_ASSIGN_FOR_INIT
        -:  331:
        -:  332:  /// @cond undocumented
        -:  333:
        -:  334:  // Extensions: versions of uninitialized_copy, uninitialized_fill,
        -:  335:  //  and uninitialized_fill_n that take an allocator parameter.
        -:  336:  //  We dispatch back to the standard versions when we're given the
        -:  337:  //  default allocator.  For nondefault allocators we do not use
        -:  338:  //  any of the POD optimizations.
        -:  339:
        -:  340:  template<typename _InputIterator, typename _ForwardIterator,
        -:  341:	   typename _Allocator>
        -:  342:    _GLIBCXX20_CONSTEXPR
        -:  343:    _ForwardIterator
        -:  344:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  345:			   _ForwardIterator __result, _Allocator& __alloc)
        -:  346:    {
        -:  347:      _ForwardIterator __cur = __result;
        -:  348:      __try
        -:  349:	{
        -:  350:	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  351:	  for (; __first != __last; ++__first, (void)++__cur)
        -:  352:	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
        -:  353:	  return __cur;
        -:  354:	}
        -:  355:      __catch(...)
        -:  356:	{
        -:  357:	  std::_Destroy(__result, __cur, __alloc);
        -:  358:	  __throw_exception_again;
        -:  359:	}
        -:  360:    }
        -:  361:
        -:  362:#if _GLIBCXX_HOSTED
        -:  363:  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
        -:  364:    _GLIBCXX20_CONSTEXPR
        -:  365:    inline _ForwardIterator
    1749*:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    1749*:  370:      if (std::is_constant_evaluated())
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
        -:  372:#endif
    1749*:  373:      return std::uninitialized_copy(__first, __last, __result);
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3ArgESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E called 66 returned 100% blocks executed 71%
       66:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
       66:  370:      if (std::is_constant_evaluated())
       66:  370-block  0
call    0 returned 66
branch  1 taken 0 (fallthrough)
branch  2 taken 66
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
       66:  373:      return std::uninitialized_copy(__first, __last, __result);
       66:  373-block  0
call    0 returned 66
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ET0_T_SC_SB_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPKPKcPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ET0_T_SC_SB_RSaIT1_E called 3 returned 100% blocks executed 71%
        3:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
        3:  370:      if (std::is_constant_evaluated())
        3:  370-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
        3:  373:      return std::uninitialized_copy(__first, __last, __result);
        3:  373-block  0
call    0 returned 3
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKPKN5Catch8TestCaseESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara8TextFlow6ColumnESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail5TokenESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E called 217 returned 100% blocks executed 71%
      217:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
      217:  370:      if (std::is_constant_evaluated())
      217:  370-block  0
call    0 returned 217
branch  1 taken 0 (fallthrough)
branch  2 taken 217
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
      217:  373:      return std::uninitialized_copy(__first, __last, __result);
      217:  373-block  0
call    0 returned 217
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_S7_ET0_T_SG_SF_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEEPS7_S7_ET0_T_SG_SF_RSaIT1_E called 1134 returned 100% blocks executed 71%
     1134:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
     1134:  370:      if (std::is_constant_evaluated())
     1134:  370-block  0
call    0 returned 1134
branch  1 taken 0 (fallthrough)
branch  2 taken 1134
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
     1134:  373:      return std::uninitialized_copy(__first, __last, __result);
     1134:  373-block  0
call    0 returned 1134
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch11MessageInfoESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E called 260 returned 100% blocks executed 71%
      260:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
      260:  370:      if (std::is_constant_evaluated())
      260:  370-block  0
call    0 returned 260
branch  1 taken 0 (fallthrough)
branch  2 taken 260
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
      260:  373:      return std::uninitialized_copy(__first, __last, __result);
      260:  373-block  0
call    0 returned 260
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S5_ET0_T_S8_S7_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S5_ET0_T_S8_S7_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPN5Catch5clara6detail3OptES4_S3_ET0_T_S6_S5_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPN5Catch5clara6detail3OptES4_S3_ET0_T_S6_S5_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPN5Catch5clara6detail3ArgES4_S3_ET0_T_S6_S5_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPN5Catch5clara6detail3ArgES4_S3_ET0_T_S6_S5_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestCaseESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E called 1 returned 100% blocks executed 71%
        1:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
        1:  370:      if (std::is_constant_evaluated())
        1:  370-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
        1:  373:      return std::uninitialized_copy(__first, __last, __result);
        1:  373-block  0
call    0 returned 1
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS4_SaIS4_EEEEPS4_S4_ET0_T_SD_SC_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch8TestSpec6FilterESt6vectorIS4_SaIS4_EEEEPS4_S4_ET0_T_SD_SC_RSaIT1_E called 1 returned 100% blocks executed 71%
        1:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
        1:  370:      if (std::is_constant_evaluated())
        1:  370-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
        1:  373:      return std::uninitialized_copy(__first, __last, __result);
        1:  373-block  0
call    0 returned 1
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIP7DungeonS1_S0_ET0_T_S3_S2_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIP7DungeonS1_S0_ET0_T_S3_S2_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET0_T_SA_S9_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_S5_ET0_T_SA_S9_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPKN5Catch5clara6detail11HelpColumnsEPS3_S3_ET0_T_S8_S7_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPKN5Catch5clara6detail11HelpColumnsEPS3_S3_ET0_T_S8_S7_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN5Catch5clara6detail3OptESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E called 66 returned 100% blocks executed 71%
       66:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
       66:  370:      if (std::is_constant_evaluated())
       66:  370-block  0
call    0 returned 66
branch  1 taken 0 (fallthrough)
branch  2 taken 66
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
       66:  373:      return std::uninitialized_copy(__first, __last, __result);
       66:  373-block  0
call    0 returned 66
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS5_SaIS5_EEEES6_S5_ET0_T_SC_SB_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPN5Catch5clara6detail11HelpColumnsESt6vectorIS5_SaIS5_EEEES6_S5_ET0_T_SC_SB_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS2_S2_ET0_T_S7_S6_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPKN5Catch12_GLOBAL__N_110ColumnInfoEPS2_S2_ET0_T_S7_S6_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK7DungeonSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E called 1 returned 100% blocks executed 71%
        1:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
        1:  370:      if (std::is_constant_evaluated())
        1:  370-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
        1:  373:      return std::uninitialized_copy(__first, __last, __result);
        1:  373-block  0
call    0 returned 1
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES5_S4_ET0_T_S8_S7_RSaIT1_E:
function _ZSt22__uninitialized_copy_aISt13move_iteratorIPN5Catch5clara6detail11HelpColumnsEES5_S4_ET0_T_S8_S7_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aISt13move_iteratorIPN5Catch13ScopedMessageEES3_S2_ET0_T_S6_S5_RSaIT1_E:
function _ZSt22__uninitialized_copy_aISt13move_iteratorIPN5Catch13ScopedMessageEES3_S2_ET0_T_S6_S5_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E:
function _ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS6_SaIS6_EEEEPS6_S6_ET0_T_SF_SE_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN5Catch8TestSpec7PatternEESt6vectorIS6_SaIS6_EEEEPS6_S6_ET0_T_SF_SE_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPKN5Catch14AssertionStatsEPS1_S1_ET0_T_S6_S5_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPKN5Catch14AssertionStatsEPS1_S1_ET0_T_S6_S5_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESD_SC_ET0_T_SF_SE_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESD_SC_ET0_T_SF_SE_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS1_IPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISC_SaISC_EEEEPSC_SC_ET0_T_SL_SK_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx119sub_matchINS1_IPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESt6vectorISC_SaISC_EEEEPSC_SC_ET0_T_SL_SK_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIccESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKNSt7__cxx1112regex_traitsIcE10_RegexMaskESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ESt6vectorIS9_SaIS9_EEEEPS9_S9_ET0_T_SI_SH_RSaIT1_E:
function _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ESt6vectorIS9_SaIS9_EEEEPS9_S9_ET0_T_SI_SH_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  366:    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
        -:  367:			   _ForwardIterator __result, allocator<_Tp>&)
        -:  368:    {
        -:  369:#ifdef __cpp_lib_is_constant_evaluated
    #####:  370:      if (std::is_constant_evaluated())
    %%%%%:  370-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  371:	return std::__do_uninit_copy(__first, __last, __result);
    %%%%%:  371-block  0
call    0 never executed
        -:  372:#endif
    #####:  373:      return std::uninitialized_copy(__first, __last, __result);
    %%%%%:  373-block  0
call    0 never executed
        -:  374:    }
------------------
        -:  375:#endif
        -:  376:
        -:  377:  template<typename _InputIterator, typename _ForwardIterator,
        -:  378:	   typename _Allocator>
        -:  379:    _GLIBCXX20_CONSTEXPR
        -:  380:    inline _ForwardIterator
    #####:  381:    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
        -:  382:			   _ForwardIterator __result, _Allocator& __alloc)
        -:  383:    {
    #####:  384:      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
        -:  385:					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
    #####:  386:					 __result, __alloc);
        -:  387:    }
------------------
_ZSt22__uninitialized_move_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_:
function _ZSt22__uninitialized_move_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_ called 0 returned 0% blocks executed 0%
    #####:  381:    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
        -:  382:			   _ForwardIterator __result, _Allocator& __alloc)
        -:  383:    {
    #####:  384:      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
    %%%%%:  384-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  385:					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
    #####:  386:					 __result, __alloc);
        -:  387:    }
------------------
_ZSt22__uninitialized_move_aIPN5Catch5clara6detail11HelpColumnsES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt22__uninitialized_move_aIPN5Catch5clara6detail11HelpColumnsES4_SaIS3_EET0_T_S7_S6_RT1_ called 0 returned 0% blocks executed 0%
    #####:  381:    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
        -:  382:			   _ForwardIterator __result, _Allocator& __alloc)
        -:  383:    {
    #####:  384:      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
    %%%%%:  384-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  385:					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
    #####:  386:					 __result, __alloc);
        -:  387:    }
------------------
        -:  388:
        -:  389:  template<typename _InputIterator, typename _ForwardIterator,
        -:  390:	   typename _Allocator>
        -:  391:    _GLIBCXX20_CONSTEXPR
        -:  392:    inline _ForwardIterator
    #####:  393:    __uninitialized_move_if_noexcept_a(_InputIterator __first,
        -:  394:				       _InputIterator __last,
        -:  395:				       _ForwardIterator __result,
        -:  396:				       _Allocator& __alloc)
        -:  397:    {
        -:  398:      return std::__uninitialized_copy_a
    #####:  399:	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
    #####:  400:	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
        -:  401:    }
------------------
_ZSt34__uninitialized_move_if_noexcept_aIPN5Catch14AssertionStatsES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt34__uninitialized_move_if_noexcept_aIPN5Catch14AssertionStatsES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####:  393:    __uninitialized_move_if_noexcept_a(_InputIterator __first,
        -:  394:				       _InputIterator __last,
        -:  395:				       _ForwardIterator __result,
        -:  396:				       _Allocator& __alloc)
        -:  397:    {
        -:  398:      return std::__uninitialized_copy_a
    #####:  399:	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  400:	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
        -:  401:    }
------------------
_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_:
function _ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_ called 0 returned 0% blocks executed 0%
    #####:  393:    __uninitialized_move_if_noexcept_a(_InputIterator __first,
        -:  394:				       _InputIterator __last,
        -:  395:				       _ForwardIterator __result,
        -:  396:				       _Allocator& __alloc)
        -:  397:    {
        -:  398:      return std::__uninitialized_copy_a
    #####:  399:	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  400:	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
        -:  401:    }
------------------
_ZSt34__uninitialized_move_if_noexcept_aIPN5Catch13ScopedMessageES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt34__uninitialized_move_if_noexcept_aIPN5Catch13ScopedMessageES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####:  393:    __uninitialized_move_if_noexcept_a(_InputIterator __first,
        -:  394:				       _InputIterator __last,
        -:  395:				       _ForwardIterator __result,
        -:  396:				       _Allocator& __alloc)
        -:  397:    {
        -:  398:      return std::__uninitialized_copy_a
    #####:  399:	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  400:	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
        -:  401:    }
------------------
_ZSt34__uninitialized_move_if_noexcept_aIPN5Catch5clara6detail11HelpColumnsES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt34__uninitialized_move_if_noexcept_aIPN5Catch5clara6detail11HelpColumnsES4_SaIS3_EET0_T_S7_S6_RT1_ called 0 returned 0% blocks executed 0%
    #####:  393:    __uninitialized_move_if_noexcept_a(_InputIterator __first,
        -:  394:				       _InputIterator __last,
        -:  395:				       _ForwardIterator __result,
        -:  396:				       _Allocator& __alloc)
        -:  397:    {
        -:  398:      return std::__uninitialized_copy_a
    #####:  399:	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
    %%%%%:  399-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  400:	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
        -:  401:    }
------------------
        -:  402:
        -:  403:  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
        -:  404:    _GLIBCXX20_CONSTEXPR
        -:  405:    void
        -:  406:    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
        -:  407:			   const _Tp& __x, _Allocator& __alloc)
        -:  408:    {
        -:  409:      _ForwardIterator __cur = __first;
        -:  410:      __try
        -:  411:	{
        -:  412:	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  413:	  for (; __cur != __last; ++__cur)
        -:  414:	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
        -:  415:	}
        -:  416:      __catch(...)
        -:  417:	{
        -:  418:	  std::_Destroy(__first, __cur, __alloc);
        -:  419:	  __throw_exception_again;
        -:  420:	}
        -:  421:    }
        -:  422:
        -:  423:#if _GLIBCXX_HOSTED
        -:  424:  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
        -:  425:    _GLIBCXX20_CONSTEXPR
        -:  426:    inline void
        -:  427:    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
        -:  428:			   const _Tp& __x, allocator<_Tp2>&)
        -:  429:    {
        -:  430:#ifdef __cpp_lib_is_constant_evaluated
        -:  431:      if (std::is_constant_evaluated())
        -:  432:	return std::__do_uninit_fill(__first, __last, __x);
        -:  433:#endif
        -:  434:      std::uninitialized_fill(__first, __last, __x);
        -:  435:    }
        -:  436:#endif
        -:  437:
        -:  438:  template<typename _ForwardIterator, typename _Size, typename _Tp,
        -:  439:	   typename _Allocator>
        -:  440:     _GLIBCXX20_CONSTEXPR
        -:  441:    _ForwardIterator
        -:  442:    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        -:  443:			     const _Tp& __x, _Allocator& __alloc)
        -:  444:    {
        -:  445:      _ForwardIterator __cur = __first;
        -:  446:      __try
        -:  447:	{
        -:  448:	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  449:	  for (; __n > 0; --__n, (void) ++__cur)
        -:  450:	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
        -:  451:	  return __cur;
        -:  452:	}
        -:  453:      __catch(...)
        -:  454:	{
        -:  455:	  std::_Destroy(__first, __cur, __alloc);
        -:  456:	  __throw_exception_again;
        -:  457:	}
        -:  458:    }
        -:  459:
        -:  460:#if _GLIBCXX_HOSTED
        -:  461:  template<typename _ForwardIterator, typename _Size, typename _Tp,
        -:  462:	   typename _Tp2>
        -:  463:    _GLIBCXX20_CONSTEXPR
        -:  464:    inline _ForwardIterator
function _ZSt24__uninitialized_fill_n_aIPNSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS0_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEySC_SC_ET_SE_T0_RKT1_RSaIT2_E called 0 returned 0% blocks executed 0%
    #####:  465:    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        -:  466:			     const _Tp& __x, allocator<_Tp2>&)
        -:  467:    {
        -:  468:#ifdef __cpp_lib_is_constant_evaluated
    #####:  469:      if (std::is_constant_evaluated())
    %%%%%:  469-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  470:	return std::__do_uninit_fill_n(__first, __n, __x);
    %%%%%:  470-block  0
call    0 never executed
        -:  471:#endif
    #####:  472:      return std::uninitialized_fill_n(__first, __n, __x);
    %%%%%:  472-block  0
call    0 never executed
        -:  473:    }
        -:  474:#endif
        -:  475:
        -:  476:  // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
        -:  477:  // __uninitialized_fill_move, __uninitialized_move_fill.
        -:  478:  // All of these algorithms take a user-supplied allocator, which is used
        -:  479:  // for construction and destruction.
        -:  480:
        -:  481:  // __uninitialized_copy_move
        -:  482:  // Copies [first1, last1) into [result, result + (last1 - first1)), and
        -:  483:  //  move [first2, last2) into
        -:  484:  //  [result, result + (last1 - first1) + (last2 - first2)).
        -:  485:  template<typename _InputIterator1, typename _InputIterator2,
        -:  486:	   typename _ForwardIterator, typename _Allocator>
        -:  487:    inline _ForwardIterator
        -:  488:    __uninitialized_copy_move(_InputIterator1 __first1,
        -:  489:			      _InputIterator1 __last1,
        -:  490:			      _InputIterator2 __first2,
        -:  491:			      _InputIterator2 __last2,
        -:  492:			      _ForwardIterator __result,
        -:  493:			      _Allocator& __alloc)
        -:  494:    {
        -:  495:      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
        -:  496:							   __result,
        -:  497:							   __alloc);
        -:  498:      __try
        -:  499:	{
        -:  500:	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
        -:  501:	}
        -:  502:      __catch(...)
        -:  503:	{
        -:  504:	  std::_Destroy(__result, __mid, __alloc);
        -:  505:	  __throw_exception_again;
        -:  506:	}
        -:  507:    }
        -:  508:
        -:  509:  // __uninitialized_move_copy
        -:  510:  // Moves [first1, last1) into [result, result + (last1 - first1)), and
        -:  511:  //  copies [first2, last2) into
        -:  512:  //  [result, result + (last1 - first1) + (last2 - first2)).
        -:  513:  template<typename _InputIterator1, typename _InputIterator2,
        -:  514:	   typename _ForwardIterator, typename _Allocator>
        -:  515:    inline _ForwardIterator
        -:  516:    __uninitialized_move_copy(_InputIterator1 __first1,
        -:  517:			      _InputIterator1 __last1,
        -:  518:			      _InputIterator2 __first2,
        -:  519:			      _InputIterator2 __last2,
        -:  520:			      _ForwardIterator __result,
        -:  521:			      _Allocator& __alloc)
        -:  522:    {
        -:  523:      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
        -:  524:							   __result,
        -:  525:							   __alloc);
        -:  526:      __try
        -:  527:	{
        -:  528:	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
        -:  529:	}
        -:  530:      __catch(...)
        -:  531:	{
        -:  532:	  std::_Destroy(__result, __mid, __alloc);
        -:  533:	  __throw_exception_again;
        -:  534:	}
        -:  535:    }
        -:  536:
        -:  537:  // __uninitialized_fill_move
        -:  538:  // Fills [result, mid) with x, and moves [first, last) into
        -:  539:  //  [mid, mid + (last - first)).
        -:  540:  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
        -:  541:	   typename _Allocator>
        -:  542:    inline _ForwardIterator
        -:  543:    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
        -:  544:			      const _Tp& __x, _InputIterator __first,
        -:  545:			      _InputIterator __last, _Allocator& __alloc)
        -:  546:    {
        -:  547:      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
        -:  548:      __try
        -:  549:	{
        -:  550:	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
        -:  551:	}
        -:  552:      __catch(...)
        -:  553:	{
        -:  554:	  std::_Destroy(__result, __mid, __alloc);
        -:  555:	  __throw_exception_again;
        -:  556:	}
        -:  557:    }
        -:  558:
        -:  559:  // __uninitialized_move_fill
        -:  560:  // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
        -:  561:  //  fills [first2 + (last1 - first1), last2) with x.
        -:  562:  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
        -:  563:	   typename _Allocator>
        -:  564:    inline void
        -:  565:    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
        -:  566:			      _ForwardIterator __first2,
        -:  567:			      _ForwardIterator __last2, const _Tp& __x,
        -:  568:			      _Allocator& __alloc)
        -:  569:    {
        -:  570:      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
        -:  571:							    __first2,
        -:  572:							    __alloc);
        -:  573:      __try
        -:  574:	{
        -:  575:	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
        -:  576:	}
        -:  577:      __catch(...)
        -:  578:	{
        -:  579:	  std::_Destroy(__first2, __mid2, __alloc);
        -:  580:	  __throw_exception_again;
        -:  581:	}
        -:  582:    }
        -:  583:
        -:  584:  /// @endcond
        -:  585:
        -:  586:#if __cplusplus >= 201103L
        -:  587:  /// @cond undocumented
        -:  588:
        -:  589:  // Extensions: __uninitialized_default, __uninitialized_default_n,
        -:  590:  // __uninitialized_default_a, __uninitialized_default_n_a.
        -:  591:
        -:  592:  template<bool _TrivialValueType>
        -:  593:    struct __uninitialized_default_1
        -:  594:    {
        -:  595:      template<typename _ForwardIterator>
        -:  596:        static void
        -:  597:        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        -:  598:        {
        -:  599:	  _ForwardIterator __cur = __first;
        -:  600:	  __try
        -:  601:	    {
        -:  602:	      for (; __cur != __last; ++__cur)
        -:  603:		std::_Construct(std::__addressof(*__cur));
        -:  604:	    }
        -:  605:	  __catch(...)
        -:  606:	    {
        -:  607:	      std::_Destroy(__first, __cur);
        -:  608:	      __throw_exception_again;
        -:  609:	    }
        -:  610:	}
        -:  611:    };
        -:  612:
        -:  613:  template<>
        -:  614:    struct __uninitialized_default_1<true>
        -:  615:    {
        -:  616:      template<typename _ForwardIterator>
        -:  617:        static void
        -:  618:        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        -:  619:        {
        -:  620:	  if (__first == __last)
        -:  621:	    return;
        -:  622:
        -:  623:	  typename iterator_traits<_ForwardIterator>::value_type* __val
        -:  624:	    = std::__addressof(*__first);
        -:  625:	  std::_Construct(__val);
        -:  626:	  if (++__first != __last)
        -:  627:	    std::fill(__first, __last, *__val);
        -:  628:	}
        -:  629:    };
        -:  630:
        -:  631:  template<bool _TrivialValueType>
        -:  632:    struct __uninitialized_default_n_1
        -:  633:    {
        -:  634:      template<typename _ForwardIterator, typename _Size>
        -:  635:	_GLIBCXX20_CONSTEXPR
        -:  636:        static _ForwardIterator
       1*:  637:        __uninit_default_n(_ForwardIterator __first, _Size __n)
        -:  638:        {
       1*:  639:	  _ForwardIterator __cur = __first;
        -:  640:	  __try
        -:  641:	    {
       1*:  642:	      for (; __n > 0; --__n, (void) ++__cur)
    #####:  643:		std::_Construct(std::__addressof(*__cur));
       1*:  644:	      return __cur;
        -:  645:	    }
    =====:  646:	  __catch(...)
        -:  647:	    {
    =====:  648:	      std::_Destroy(__first, __cur);
    =====:  649:	      __throw_exception_again;
        -:  650:	    }
        -:  651:	}
------------------
_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEyEET_SG_T0_:
function _ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPSt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEyEET_SG_T0_ called 0 returned 0% blocks executed 0%
    #####:  637:        __uninit_default_n(_ForwardIterator __first, _Size __n)
        -:  638:        {
    #####:  639:	  _ForwardIterator __cur = __first;
        -:  640:	  __try
        -:  641:	    {
    #####:  642:	      for (; __n > 0; --__n, (void) ++__cur)
    %%%%%:  642-block  0
    %%%%%:  642-block  1
    %%%%%:  642-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  643:		std::_Construct(std::__addressof(*__cur));
    %%%%%:  643-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  644:	      return __cur;
    %%%%%:  644-block  0
    %%%%%:  644-block  1
        -:  645:	    }
    =====:  646:	  __catch(...)
    $$$$$:  646-block  0
    $$$$$:  646-block  1
call    0 never executed
    $$$$$:  646-block  2
call    1 never executed
        -:  647:	    {
    =====:  648:	      std::_Destroy(__first, __cur);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    =====:  649:	      __throw_exception_again;
    $$$$$:  649-block  0
call    0 never executed
        -:  650:	    }
        -:  651:	}
------------------
_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN5Catch8TestSpec11FilterMatchEyEET_S6_T0_:
function _ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN5Catch8TestSpec11FilterMatchEyEET_S6_T0_ called 1 returned 100% blocks executed 57%
        1:  637:        __uninit_default_n(_ForwardIterator __first, _Size __n)
        -:  638:        {
        1:  639:	  _ForwardIterator __cur = __first;
        -:  640:	  __try
        -:  641:	    {
       1*:  642:	      for (; __n > 0; --__n, (void) ++__cur)
        1:  642-block  0
        1:  642-block  1
branch  0 taken 0
branch  1 taken 1 (fallthrough)
    #####:  643:		std::_Construct(std::__addressof(*__cur));
    %%%%%:  643-block  0
call    0 never executed
call    1 never executed
        1:  644:	      return __cur;
        1:  644-block  0
        -:  645:	    }
        -:  646:	  __catch(...)
        -:  647:	    {
        -:  648:	      std::_Destroy(__first, __cur);
        -:  649:	      __throw_exception_again;
        -:  650:	    }
        -:  651:	}
------------------
_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN5Catch5clara6detail5TokenEyEET_S7_T0_:
function _ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIPN5Catch5clara6detail5TokenEyEET_S7_T0_ called 0 returned 0% blocks executed 0%
    #####:  637:        __uninit_default_n(_ForwardIterator __first, _Size __n)
        -:  638:        {
    #####:  639:	  _ForwardIterator __cur = __first;
        -:  640:	  __try
        -:  641:	    {
    #####:  642:	      for (; __n > 0; --__n, (void) ++__cur)
    %%%%%:  642-block  0
    %%%%%:  642-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  643:		std::_Construct(std::__addressof(*__cur));
    %%%%%:  643-block  0
call    0 never executed
call    1 never executed
    #####:  644:	      return __cur;
    %%%%%:  644-block  0
        -:  645:	    }
        -:  646:	  __catch(...)
        -:  647:	    {
        -:  648:	      std::_Destroy(__first, __cur);
        -:  649:	      __throw_exception_again;
        -:  650:	    }
        -:  651:	}
------------------
        -:  652:    };
        -:  653:
        -:  654:  template<>
        -:  655:    struct __uninitialized_default_n_1<true>
        -:  656:    {
        -:  657:      template<typename _ForwardIterator, typename _Size>
        -:  658:	_GLIBCXX20_CONSTEXPR
        -:  659:        static _ForwardIterator
        -:  660:        __uninit_default_n(_ForwardIterator __first, _Size __n)
        -:  661:        {
        -:  662:	  if (__n > 0)
        -:  663:	    {
        -:  664:	      typename iterator_traits<_ForwardIterator>::value_type* __val
        -:  665:		= std::__addressof(*__first);
        -:  666:	      std::_Construct(__val);
        -:  667:	      ++__first;
        -:  668:	      __first = std::fill_n(__first, __n - 1, *__val);
        -:  669:	    }
        -:  670:	  return __first;
        -:  671:	}
        -:  672:    };
        -:  673:
        -:  674:  // __uninitialized_default
        -:  675:  // Fills [first, last) with value-initialized value_types.
        -:  676:  template<typename _ForwardIterator>
        -:  677:    inline void
        -:  678:    __uninitialized_default(_ForwardIterator __first,
        -:  679:			    _ForwardIterator __last)
        -:  680:    {
        -:  681:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  682:	_ValueType;
        -:  683:      // trivial types can have deleted assignment
        -:  684:      const bool __assignable = is_copy_assignable<_ValueType>::value;
        -:  685:
        -:  686:      std::__uninitialized_default_1<__is_trivial(_ValueType)
        -:  687:				     && __assignable>::
        -:  688:	__uninit_default(__first, __last);
        -:  689:    }
        -:  690:
        -:  691:  // __uninitialized_default_n
        -:  692:  // Fills [first, first + n) with value-initialized value_types.
        -:  693:  template<typename _ForwardIterator, typename _Size>
        -:  694:    _GLIBCXX20_CONSTEXPR
        -:  695:    inline _ForwardIterator
       1*:  696:    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
        -:  697:    {
        -:  698:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  699:	_ValueType;
        -:  700:      // See uninitialized_fill_n for the conditions for using std::fill_n.
       1*:  701:      constexpr bool __can_fill
        -:  702:	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
        -:  703:
        -:  704:      return __uninitialized_default_n_1<__is_trivial(_ValueType)
        -:  705:					 && __can_fill>::
       1*:  706:	__uninit_default_n(__first, __n);
        -:  707:    }
------------------
_ZSt25__uninitialized_default_nIPSt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEyET_SE_T0_:
function _ZSt25__uninitialized_default_nIPSt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEyET_SE_T0_ called 0 returned 0% blocks executed 0%
    #####:  696:    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
        -:  697:    {
        -:  698:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  699:	_ValueType;
        -:  700:      // See uninitialized_fill_n for the conditions for using std::fill_n.
    #####:  701:      constexpr bool __can_fill
        -:  702:	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
        -:  703:
        -:  704:      return __uninitialized_default_n_1<__is_trivial(_ValueType)
        -:  705:					 && __can_fill>::
    #####:  706:	__uninit_default_n(__first, __n);
    %%%%%:  706-block  0
call    0 never executed
        -:  707:    }
------------------
_ZSt25__uninitialized_default_nIPN5Catch8TestSpec11FilterMatchEyET_S4_T0_:
function _ZSt25__uninitialized_default_nIPN5Catch8TestSpec11FilterMatchEyET_S4_T0_ called 1 returned 100% blocks executed 100%
        1:  696:    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
        -:  697:    {
        -:  698:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  699:	_ValueType;
        -:  700:      // See uninitialized_fill_n for the conditions for using std::fill_n.
        1:  701:      constexpr bool __can_fill
        -:  702:	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
        -:  703:
        -:  704:      return __uninitialized_default_n_1<__is_trivial(_ValueType)
        -:  705:					 && __can_fill>::
        1:  706:	__uninit_default_n(__first, __n);
        1:  706-block  0
call    0 returned 1
        -:  707:    }
------------------
_ZSt25__uninitialized_default_nIPN5Catch5clara6detail5TokenEyET_S5_T0_:
function _ZSt25__uninitialized_default_nIPN5Catch5clara6detail5TokenEyET_S5_T0_ called 0 returned 0% blocks executed 0%
    #####:  696:    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
        -:  697:    {
        -:  698:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  699:	_ValueType;
        -:  700:      // See uninitialized_fill_n for the conditions for using std::fill_n.
    #####:  701:      constexpr bool __can_fill
        -:  702:	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
        -:  703:
        -:  704:      return __uninitialized_default_n_1<__is_trivial(_ValueType)
        -:  705:					 && __can_fill>::
    #####:  706:	__uninit_default_n(__first, __n);
    %%%%%:  706-block  0
call    0 never executed
        -:  707:    }
------------------
        -:  708:
        -:  709:
        -:  710:  // __uninitialized_default_a
        -:  711:  // Fills [first, last) with value_types constructed by the allocator
        -:  712:  // alloc, with no arguments passed to the construct call.
        -:  713:  template<typename _ForwardIterator, typename _Allocator>
        -:  714:    void
        -:  715:    __uninitialized_default_a(_ForwardIterator __first,
        -:  716:			      _ForwardIterator __last,
        -:  717:			      _Allocator& __alloc)
        -:  718:    {
        -:  719:      _ForwardIterator __cur = __first;
        -:  720:      __try
        -:  721:	{
        -:  722:	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  723:	  for (; __cur != __last; ++__cur)
        -:  724:	    __traits::construct(__alloc, std::__addressof(*__cur));
        -:  725:	}
        -:  726:      __catch(...)
        -:  727:	{
        -:  728:	  std::_Destroy(__first, __cur, __alloc);
        -:  729:	  __throw_exception_again;
        -:  730:	}
        -:  731:    }
        -:  732:
        -:  733:#if _GLIBCXX_HOSTED
        -:  734:  template<typename _ForwardIterator, typename _Tp>
        -:  735:    inline void
        -:  736:    __uninitialized_default_a(_ForwardIterator __first,
        -:  737:			      _ForwardIterator __last,
        -:  738:			      allocator<_Tp>&)
        -:  739:    { std::__uninitialized_default(__first, __last); }
        -:  740:#endif
        -:  741:
        -:  742:  // __uninitialized_default_n_a
        -:  743:  // Fills [first, first + n) with value_types constructed by the allocator
        -:  744:  // alloc, with no arguments passed to the construct call.
        -:  745:  template<typename _ForwardIterator, typename _Size, typename _Allocator>
        -:  746:    _GLIBCXX20_CONSTEXPR _ForwardIterator
        -:  747:    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
        -:  748:				_Allocator& __alloc)
        -:  749:    {
        -:  750:      _ForwardIterator __cur = __first;
        -:  751:      __try
        -:  752:	{
        -:  753:	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  754:	  for (; __n > 0; --__n, (void) ++__cur)
        -:  755:	    __traits::construct(__alloc, std::__addressof(*__cur));
        -:  756:	  return __cur;
        -:  757:	}
        -:  758:      __catch(...)
        -:  759:	{
        -:  760:	  std::_Destroy(__first, __cur, __alloc);
        -:  761:	  __throw_exception_again;
        -:  762:	}
        -:  763:    }
        -:  764:
        -:  765:#if _GLIBCXX_HOSTED
        -:  766:  // __uninitialized_default_n_a specialization for std::allocator,
        -:  767:  // which ignores the allocator and value-initializes the elements.
        -:  768:  template<typename _ForwardIterator, typename _Size, typename _Tp>
        -:  769:    _GLIBCXX20_CONSTEXPR
        -:  770:    inline _ForwardIterator
       1*:  771:    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
        -:  772:				allocator<_Tp>&)
       1*:  773:    { return std::__uninitialized_default_n(__first, __n); }
------------------
_ZSt27__uninitialized_default_n_aIPSt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEySC_ET_SE_T0_RSaIT1_E:
function _ZSt27__uninitialized_default_n_aIPSt4pairIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEySC_ET_SE_T0_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  771:    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
        -:  772:				allocator<_Tp>&)
    #####:  773:    { return std::__uninitialized_default_n(__first, __n); }
    %%%%%:  773-block  0
call    0 never executed
------------------
_ZSt27__uninitialized_default_n_aIPN5Catch8TestSpec11FilterMatchEyS2_ET_S4_T0_RSaIT1_E:
function _ZSt27__uninitialized_default_n_aIPN5Catch8TestSpec11FilterMatchEyS2_ET_S4_T0_RSaIT1_E called 1 returned 100% blocks executed 100%
        1:  771:    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
        -:  772:				allocator<_Tp>&)
        1:  773:    { return std::__uninitialized_default_n(__first, __n); }
        1:  773-block  0
call    0 returned 1
------------------
_ZSt27__uninitialized_default_n_aIPN5Catch5clara6detail5TokenEyS3_ET_S5_T0_RSaIT1_E:
function _ZSt27__uninitialized_default_n_aIPN5Catch5clara6detail5TokenEyS3_ET_S5_T0_RSaIT1_E called 0 returned 0% blocks executed 0%
    #####:  771:    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
        -:  772:				allocator<_Tp>&)
    #####:  773:    { return std::__uninitialized_default_n(__first, __n); }
    %%%%%:  773-block  0
call    0 never executed
------------------
        -:  774:#endif
        -:  775:
        -:  776:  template<bool _TrivialValueType>
        -:  777:    struct __uninitialized_default_novalue_1
        -:  778:    {
        -:  779:      template<typename _ForwardIterator>
        -:  780:	static void
        -:  781:	__uninit_default_novalue(_ForwardIterator __first,
        -:  782:				 _ForwardIterator __last)
        -:  783:	{
        -:  784:	  _ForwardIterator __cur = __first;
        -:  785:	  __try
        -:  786:	    {
        -:  787:	      for (; __cur != __last; ++__cur)
        -:  788:		std::_Construct_novalue(std::__addressof(*__cur));
        -:  789:	    }
        -:  790:	  __catch(...)
        -:  791:	    {
        -:  792:	      std::_Destroy(__first, __cur);
        -:  793:	      __throw_exception_again;
        -:  794:	    }
        -:  795:	}
        -:  796:    };
        -:  797:
        -:  798:  template<>
        -:  799:    struct __uninitialized_default_novalue_1<true>
        -:  800:    {
        -:  801:      template<typename _ForwardIterator>
        -:  802:        static void
        -:  803:        __uninit_default_novalue(_ForwardIterator __first,
        -:  804:				 _ForwardIterator __last)
        -:  805:	{
        -:  806:	}
        -:  807:    };
        -:  808:
        -:  809:  template<bool _TrivialValueType>
        -:  810:    struct __uninitialized_default_novalue_n_1
        -:  811:    {
        -:  812:      template<typename _ForwardIterator, typename _Size>
        -:  813:	static _ForwardIterator
        -:  814:	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
        -:  815:	{
        -:  816:	  _ForwardIterator __cur = __first;
        -:  817:	  __try
        -:  818:	    {
        -:  819:	      for (; __n > 0; --__n, (void) ++__cur)
        -:  820:		std::_Construct_novalue(std::__addressof(*__cur));
        -:  821:	      return __cur;
        -:  822:	    }
        -:  823:	  __catch(...)
        -:  824:	    {
        -:  825:	      std::_Destroy(__first, __cur);
        -:  826:	      __throw_exception_again;
        -:  827:	    }
        -:  828:	}
        -:  829:    };
        -:  830:
        -:  831:  template<>
        -:  832:    struct __uninitialized_default_novalue_n_1<true>
        -:  833:    {
        -:  834:      template<typename _ForwardIterator, typename _Size>
        -:  835:	static _ForwardIterator
        -:  836:	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
        -:  837:	{ return std::next(__first, __n); }
        -:  838:    };
        -:  839:
        -:  840:  // __uninitialized_default_novalue
        -:  841:  // Fills [first, last) with default-initialized value_types.
        -:  842:  template<typename _ForwardIterator>
        -:  843:    inline void
        -:  844:    __uninitialized_default_novalue(_ForwardIterator __first,
        -:  845:				    _ForwardIterator __last)
        -:  846:    {
        -:  847:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  848:	_ValueType;
        -:  849:
        -:  850:      std::__uninitialized_default_novalue_1<
        -:  851:	is_trivially_default_constructible<_ValueType>::value>::
        -:  852:	__uninit_default_novalue(__first, __last);
        -:  853:    }
        -:  854:
        -:  855:  // __uninitialized_default_novalue_n
        -:  856:  // Fills [first, first + n) with default-initialized value_types.
        -:  857:  template<typename _ForwardIterator, typename _Size>
        -:  858:    inline _ForwardIterator
        -:  859:    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
        -:  860:    {
        -:  861:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  862:	_ValueType;
        -:  863:
        -:  864:      return __uninitialized_default_novalue_n_1<
        -:  865:	is_trivially_default_constructible<_ValueType>::value>::
        -:  866:	__uninit_default_novalue_n(__first, __n);
        -:  867:    }
        -:  868:
        -:  869:  template<typename _InputIterator, typename _Size,
        -:  870:	   typename _ForwardIterator>
        -:  871:    _ForwardIterator
        -:  872:    __uninitialized_copy_n(_InputIterator __first, _Size __n,
        -:  873:			   _ForwardIterator __result, input_iterator_tag)
        -:  874:    {
        -:  875:      _ForwardIterator __cur = __result;
        -:  876:      __try
        -:  877:	{
        -:  878:	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
        -:  879:	    std::_Construct(std::__addressof(*__cur), *__first);
        -:  880:	  return __cur;
        -:  881:	}
        -:  882:      __catch(...)
        -:  883:	{
        -:  884:	  std::_Destroy(__result, __cur);
        -:  885:	  __throw_exception_again;
        -:  886:	}
        -:  887:    }
        -:  888:
        -:  889:  template<typename _RandomAccessIterator, typename _Size,
        -:  890:	   typename _ForwardIterator>
        -:  891:    inline _ForwardIterator
        -:  892:    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
        -:  893:			   _ForwardIterator __result,
        -:  894:			   random_access_iterator_tag)
        -:  895:    { return std::uninitialized_copy(__first, __first + __n, __result); }
        -:  896:
        -:  897:  template<typename _InputIterator, typename _Size,
        -:  898:	   typename _ForwardIterator>
        -:  899:    pair<_InputIterator, _ForwardIterator>
        -:  900:    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
        -:  901:			   _ForwardIterator __result, input_iterator_tag)
        -:  902:    {
        -:  903:      _ForwardIterator __cur = __result;
        -:  904:      __try
        -:  905:	{
        -:  906:	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
        -:  907:	    std::_Construct(std::__addressof(*__cur), *__first);
        -:  908:	  return {__first, __cur};
        -:  909:	}
        -:  910:      __catch(...)
        -:  911:	{
        -:  912:	  std::_Destroy(__result, __cur);
        -:  913:	  __throw_exception_again;
        -:  914:	}
        -:  915:    }
        -:  916:
        -:  917:  template<typename _RandomAccessIterator, typename _Size,
        -:  918:	   typename _ForwardIterator>
        -:  919:    inline pair<_RandomAccessIterator, _ForwardIterator>
        -:  920:    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
        -:  921:			   _ForwardIterator __result,
        -:  922:			   random_access_iterator_tag)
        -:  923:    {
        -:  924:      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
        -:  925:      auto __first_res = std::next(__first, __n);
        -:  926:      return {__first_res, __second_res};
        -:  927:    }
        -:  928:
        -:  929:  /// @endcond
        -:  930:
        -:  931:  /**
        -:  932:   *  @brief Copies the range [first,first+n) into result.
        -:  933:   *  @param  __first  An input iterator.
        -:  934:   *  @param  __n      The number of elements to copy.
        -:  935:   *  @param  __result An output iterator.
        -:  936:   *  @return  __result + __n
        -:  937:   *  @since C++11
        -:  938:   *
        -:  939:   *  Like copy_n(), but does not require an initialized output range.
        -:  940:  */
        -:  941:  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
        -:  942:    inline _ForwardIterator
        -:  943:    uninitialized_copy_n(_InputIterator __first, _Size __n,
        -:  944:			 _ForwardIterator __result)
        -:  945:    { return std::__uninitialized_copy_n(__first, __n, __result,
        -:  946:					 std::__iterator_category(__first)); }
        -:  947:
        -:  948:  /// @cond undocumented
        -:  949:  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
        -:  950:    inline pair<_InputIterator, _ForwardIterator>
        -:  951:    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
        -:  952:			      _ForwardIterator __result)
        -:  953:    {
        -:  954:      return
        -:  955:	std::__uninitialized_copy_n_pair(__first, __n, __result,
        -:  956:					 std::__iterator_category(__first));
        -:  957:    }
        -:  958:  /// @endcond
        -:  959:#endif
        -:  960:
        -:  961:#if __cplusplus >= 201703L
        -:  962:# define __cpp_lib_raw_memory_algorithms 201606L
        -:  963:
        -:  964:  /**
        -:  965:   *  @brief Default-initializes objects in the range [first,last).
        -:  966:   *  @param  __first  A forward iterator.
        -:  967:   *  @param  __last   A forward iterator.
        -:  968:   *  @since C++17
        -:  969:  */
        -:  970:  template <typename _ForwardIterator>
        -:  971:    inline void
        -:  972:    uninitialized_default_construct(_ForwardIterator __first,
        -:  973:				    _ForwardIterator __last)
        -:  974:    {
        -:  975:      __uninitialized_default_novalue(__first, __last);
        -:  976:    }
        -:  977:
        -:  978:  /**
        -:  979:   *  @brief Default-initializes objects in the range [first,first+count).
        -:  980:   *  @param  __first  A forward iterator.
        -:  981:   *  @param  __count  The number of objects to construct.
        -:  982:   *  @return   __first + __count
        -:  983:   *  @since C++17
        -:  984:  */
        -:  985:  template <typename _ForwardIterator, typename _Size>
        -:  986:    inline _ForwardIterator
        -:  987:    uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
        -:  988:    {
        -:  989:      return __uninitialized_default_novalue_n(__first, __count);
        -:  990:    }
        -:  991:
        -:  992:  /**
        -:  993:   *  @brief Value-initializes objects in the range [first,last).
        -:  994:   *  @param  __first  A forward iterator.
        -:  995:   *  @param  __last   A forward iterator.
        -:  996:   *  @since C++17
        -:  997:  */
        -:  998:  template <typename _ForwardIterator>
        -:  999:    inline void
        -: 1000:    uninitialized_value_construct(_ForwardIterator __first,
        -: 1001:				  _ForwardIterator __last)
        -: 1002:    {
        -: 1003:      return __uninitialized_default(__first, __last);
        -: 1004:    }
        -: 1005:
        -: 1006:  /**
        -: 1007:   *  @brief Value-initializes objects in the range [first,first+count).
        -: 1008:   *  @param  __first  A forward iterator.
        -: 1009:   *  @param  __count  The number of objects to construct.
        -: 1010:   *  @return   __result + __count
        -: 1011:   *  @since C++17
        -: 1012:  */
        -: 1013:  template <typename _ForwardIterator, typename _Size>
        -: 1014:    inline _ForwardIterator
        -: 1015:    uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
        -: 1016:    {
        -: 1017:      return __uninitialized_default_n(__first, __count);
        -: 1018:    }
        -: 1019:
        -: 1020:  /**
        -: 1021:   *  @brief Move-construct from the range [first,last) into result.
        -: 1022:   *  @param  __first  An input iterator.
        -: 1023:   *  @param  __last   An input iterator.
        -: 1024:   *  @param  __result An output iterator.
        -: 1025:   *  @return   __result + (__first - __last)
        -: 1026:   *  @since C++17
        -: 1027:  */
        -: 1028:  template <typename _InputIterator, typename _ForwardIterator>
        -: 1029:    inline _ForwardIterator
        -: 1030:    uninitialized_move(_InputIterator __first, _InputIterator __last,
        -: 1031:		       _ForwardIterator __result)
        -: 1032:    {
        -: 1033:      return std::uninitialized_copy
        -: 1034:	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
        -: 1035:	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
        -: 1036:    }
        -: 1037:
        -: 1038:  /**
        -: 1039:   *  @brief Move-construct from the range [first,first+count) into result.
        -: 1040:   *  @param  __first  An input iterator.
        -: 1041:   *  @param  __count  The number of objects to initialize.
        -: 1042:   *  @param  __result An output iterator.
        -: 1043:   *  @return  __result + __count
        -: 1044:   *  @since C++17
        -: 1045:  */
        -: 1046:  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
        -: 1047:    inline pair<_InputIterator, _ForwardIterator>
        -: 1048:    uninitialized_move_n(_InputIterator __first, _Size __count,
        -: 1049:			 _ForwardIterator __result)
        -: 1050:    {
        -: 1051:      auto __res = std::__uninitialized_copy_n_pair
        -: 1052:	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
        -: 1053:	 __count, __result);
        -: 1054:      return {__res.first.base(), __res.second};
        -: 1055:    }
        -: 1056:#endif // C++17
        -: 1057:
        -: 1058:#if __cplusplus >= 201103L
        -: 1059:  /// @cond undocumented
        -: 1060:
        -: 1061:  template<typename _Tp, typename _Up, typename _Allocator>
        -: 1062:    _GLIBCXX20_CONSTEXPR
        -: 1063:    inline void
     729*: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
     729*: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
     729*: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
     729*: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch5clara6detail3OptES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch5clara6detail3OptES3_SaIS3_EEvPT_PT0_RT1_ called 465 returned 100% blocks executed 100%
      465: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
      465: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
      465: 1072-block  0
call    0 returned 465
      465: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
      465: 1073-block  0
call    0 returned 465
      465: 1074:    }
------------------
_ZSt19__relocate_object_aI7DungeonS0_SaIS0_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aI7DungeonS0_SaIS0_EEvPT_PT0_RT1_ called 1 returned 100% blocks executed 100%
        1: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
        1: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
        1: 1072-block  0
call    0 returned 1
        1: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
        1: 1073-block  0
call    0 returned 1
        1: 1074:    }
------------------
_ZSt19__relocate_object_aISt4pairIiiES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt4pairIiiES1_SaIS1_EEvPT_PT0_RT1_ called 190 returned 100% blocks executed 100%
      190: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
      190: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
      190: 1072-block  0
call    0 returned 190
      190: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
      190: 1073-block  0
call    0 returned 190
      190: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch8TestSpec7PatternEES4_SaIS4_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch8TestSpec7PatternEES4_SaIS4_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch8TestSpec6FilterES2_SaIS2_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch8TestSpec6FilterES2_SaIS2_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEES4_SaIS4_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEES4_SaIS4_EEvPT_PT0_RT1_ called 27 returned 100% blocks executed 100%
       27: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
       27: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
       27: 1072-block  0
call    0 returned 27
       27: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
       27: 1073-block  0
call    0 returned 27
       27: 1074:    }
------------------
_ZSt19__relocate_object_aINSt15__exception_ptr13exception_ptrES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aINSt15__exception_ptr13exception_ptrES1_SaIS1_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch14SectionEndInfoES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch14SectionEndInfoES1_SaIS1_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch16IReporterFactoryEES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch16IReporterFactoryEES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch11MessageInfoES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch11MessageInfoES1_SaIS1_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EES6_SaIS6_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EES6_SaIS6_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch5clara6detail3ArgES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch5clara6detail3ArgES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch5clara6detail5TokenES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch5clara6detail5TokenES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch5clara8TextFlow6ColumnES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch5clara8TextFlow6ColumnES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_ called 33 returned 100% blocks executed 100%
       33: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
       33: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
       33: 1072-block  0
call    0 returned 33
       33: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
       33: 1073-block  0
call    0 returned 33
       33: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch8TestCaseES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch8TestCaseES1_SaIS1_EEvPT_PT0_RT1_ called 7 returned 100% blocks executed 100%
        7: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
        7: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
        7: 1072-block  0
call    0 returned 7
        7: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
        7: 1073-block  0
call    0 returned 7
        7: 1074:    }
------------------
_ZSt19__relocate_object_aISt4pairIyPKN5Catch8TestCaseEES5_SaIS5_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt4pairIyPKN5Catch8TestCaseEES5_SaIS5_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt4pairIiN5Catch9StringRefEES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt4pairIiN5Catch9StringRefEES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch9StringRefES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch9StringRefES1_SaIS1_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch5clara8TextFlow6Column8iteratorES4_SaIS4_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch5clara8TextFlow6Column8iteratorES4_SaIS4_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEES9_SaIS9_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEES9_SaIS9_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES7_SaIS7_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES7_SaIS7_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIccSaIcEEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIccSaIcEEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt4pairIccES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt4pairIccES1_SaIS1_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aINSt7__cxx1112regex_traitsIcE10_RegexMaskES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aINSt7__cxx1112regex_traitsIcE10_RegexMaskES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEESH_SaISH_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEESH_SaISH_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aINSt8__detail6_StateIcEES2_SaIS2_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aINSt8__detail6_StateIcEES2_SaIS2_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIPN5Catch16TestCaseTracking8ITrackerES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIPN5Catch16TestCaseTracking8ITrackerES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EES5_SaIS5_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EES5_SaIS5_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEESB_SaISB_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEESB_SaISB_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEESD_SaISD_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEESD_SaISD_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEES6_SaIS6_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEES6_SaIS6_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch13SummaryColumnES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch13SummaryColumnES1_SaIS1_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIN5Catch11SectionInfoES1_SaIS1_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIN5Catch11SectionInfoES1_SaIS1_EEvPT_PT0_RT1_ called 3 returned 100% blocks executed 100%
        3: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
        3: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
        3: 1072-block  0
call    0 returned 3
        3: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
        3: 1073-block  0
call    0 returned 3
        3: 1074:    }
------------------
_ZSt19__relocate_object_aIPKN5Catch8TestCaseES3_SaIS3_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIPKN5Catch8TestCaseES3_SaIS3_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aIyySaIyEEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIyySaIyEEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EES9_SaIS9_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EES9_SaIS9_EEvPT_PT0_RT1_ called 3 returned 100% blocks executed 100%
        3: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
        3: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
        3: 1072-block  0
call    0 returned 3
        3: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
        3: 1073-block  0
call    0 returned 3
        3: 1074:    }
------------------
_ZSt19__relocate_object_aIPN5Catch10ISingletonES2_SaIS2_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aIPN5Catch10ISingletonES2_SaIS2_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
_ZSt19__relocate_object_aISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EES6_SaIS6_EEvPT_PT0_RT1_:
function _ZSt19__relocate_object_aISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EES6_SaIS6_EEvPT_PT0_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1064:    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
        -: 1065:			_Allocator& __alloc)
        -: 1066:    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
        -: 1067:			 __dest, std::move(*__orig)))
        -: 1068:	     && noexcept(std::allocator_traits<_Allocator>::destroy(
        -: 1069:			    __alloc, std::__addressof(*__orig))))
        -: 1070:    {
        -: 1071:      typedef std::allocator_traits<_Allocator> __traits;
    #####: 1072:      __traits::construct(__alloc, __dest, std::move(*__orig));
    %%%%%: 1072-block  0
call    0 never executed
    #####: 1073:      __traits::destroy(__alloc, std::__addressof(*__orig));
    %%%%%: 1073-block  0
call    0 never executed
    #####: 1074:    }
------------------
        -: 1075:
        -: 1076:  // This class may be specialized for specific types.
        -: 1077:  // Also known as is_trivially_relocatable.
        -: 1078:  template<typename _Tp, typename = void>
        -: 1079:    struct __is_bitwise_relocatable
        -: 1080:    : is_trivial<_Tp> { };
        -: 1081:
        -: 1082:  template <typename _InputIterator, typename _ForwardIterator,
        -: 1083:	    typename _Allocator>
        -: 1084:    _GLIBCXX20_CONSTEXPR
        -: 1085:    inline _ForwardIterator
     658*: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
     658*: 1098:      _ForwardIterator __cur = __result;
    1387*: 1099:      for (; __first != __last; ++__first, (void)++__cur)
     729*: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
        -: 1101:				 std::__addressof(*__first), __alloc);
     658*: 1102:      return __cur;
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch5clara6detail3OptES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPN5Catch5clara6detail3OptES4_SaIS3_EET0_T_S7_S6_RT1_ called 62 returned 100% blocks executed 100%
       62: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
       62: 1098:      _ForwardIterator __cur = __result;
      527: 1099:      for (; __first != __last; ++__first, (void)++__cur)
       62: 1099-block  0
      527: 1099-block  1
branch  0 taken 465
branch  1 taken 62 (fallthrough)
      465: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
      465: 1100-block  0
call    0 returned 465
call    1 returned 465
call    2 returned 465
        -: 1101:				 std::__addressof(*__first), __alloc);
       62: 1102:      return __cur;
       62: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IP7DungeonS1_SaIS0_EET0_T_S4_S3_RT1_:
function _ZSt14__relocate_a_1IP7DungeonS1_SaIS0_EET0_T_S4_S3_RT1_ called 4 returned 100% blocks executed 100%
        4: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
        4: 1098:      _ForwardIterator __cur = __result;
        5: 1099:      for (; __first != __last; ++__first, (void)++__cur)
        4: 1099-block  0
        5: 1099-block  1
branch  0 taken 1
branch  1 taken 4 (fallthrough)
        1: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
        1: 1100-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -: 1101:				 std::__addressof(*__first), __alloc);
        4: 1102:      return __cur;
        4: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt4pairIiiES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPSt4pairIiiES2_SaIS1_EET0_T_S5_S4_RT1_ called 382 returned 100% blocks executed 100%
      382: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
      382: 1098:      _ForwardIterator __cur = __result;
      572: 1099:      for (; __first != __last; ++__first, (void)++__cur)
      382: 1099-block  0
      572: 1099-block  1
branch  0 taken 190
branch  1 taken 382 (fallthrough)
      190: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
      190: 1100-block  0
call    0 returned 190
call    1 returned 190
call    2 returned 190
        -: 1101:				 std::__addressof(*__first), __alloc);
      382: 1102:      return __cur;
      382: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch8TestSpec7PatternEES5_SaIS4_EET0_T_S8_S7_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch8TestSpec7PatternEES5_SaIS4_EET0_T_S8_S7_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch8TestSpec6FilterES3_SaIS2_EET0_T_S6_S5_RT1_:
function _ZSt14__relocate_a_1IPN5Catch8TestSpec6FilterES3_SaIS2_EET0_T_S6_S5_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEES5_SaIS4_EET0_T_S8_S7_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEES5_SaIS4_EET0_T_S8_S7_RT1_ called 62 returned 100% blocks executed 100%
       62: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
       62: 1098:      _ForwardIterator __cur = __result;
       89: 1099:      for (; __first != __last; ++__first, (void)++__cur)
       62: 1099-block  0
       89: 1099-block  1
branch  0 taken 27
branch  1 taken 62 (fallthrough)
       27: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
       27: 1100-block  0
call    0 returned 27
call    1 returned 27
call    2 returned 27
        -: 1101:				 std::__addressof(*__first), __alloc);
       62: 1102:      return __cur;
       62: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPNSt15__exception_ptr13exception_ptrES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPNSt15__exception_ptr13exception_ptrES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch14SectionEndInfoES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPN5Catch14SectionEndInfoES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch16IReporterFactoryEES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch16IReporterFactoryEES4_SaIS3_EET0_T_S7_S6_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch11MessageInfoES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPN5Catch11MessageInfoES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EES7_SaIS6_EET0_T_SA_S9_RT1_:
function _ZSt14__relocate_a_1IPSt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS3_EES7_SaIS6_EET0_T_SA_S9_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch5clara6detail3ArgES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPN5Catch5clara6detail3ArgES4_SaIS3_EET0_T_S7_S6_RT1_ called 2 returned 100% blocks executed 50%
        2: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
        2: 1098:      _ForwardIterator __cur = __result;
       2*: 1099:      for (; __first != __last; ++__first, (void)++__cur)
        2: 1099-block  0
        2: 1099-block  1
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
        2: 1102:      return __cur;
        2: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch5clara6detail5TokenES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPN5Catch5clara6detail5TokenES4_SaIS3_EET0_T_S7_S6_RT1_ called 2 returned 100% blocks executed 50%
        2: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
        2: 1098:      _ForwardIterator __cur = __result;
       2*: 1099:      for (; __first != __last; ++__first, (void)++__cur)
        2: 1099-block  0
        2: 1099-block  1
branch  0 taken 0
branch  1 taken 2 (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
        2: 1102:      return __cur;
        2: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch5clara8TextFlow6ColumnES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPN5Catch5clara8TextFlow6ColumnES4_SaIS3_EET0_T_S7_S6_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_:
function _ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_ called 124 returned 100% blocks executed 100%
      124: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
      124: 1098:      _ForwardIterator __cur = __result;
      157: 1099:      for (; __first != __last; ++__first, (void)++__cur)
      124: 1099-block  0
      157: 1099-block  1
branch  0 taken 33
branch  1 taken 124 (fallthrough)
       33: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
       33: 1100-block  0
call    0 returned 33
call    1 returned 33
call    2 returned 33
        -: 1101:				 std::__addressof(*__first), __alloc);
      124: 1102:      return __cur;
      124: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch8TestCaseES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPN5Catch8TestCaseES2_SaIS1_EET0_T_S5_S4_RT1_ called 8 returned 100% blocks executed 100%
        8: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
        8: 1098:      _ForwardIterator __cur = __result;
       15: 1099:      for (; __first != __last; ++__first, (void)++__cur)
        8: 1099-block  0
       15: 1099-block  1
branch  0 taken 7
branch  1 taken 8 (fallthrough)
        7: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
        7: 1100-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 1101:				 std::__addressof(*__first), __alloc);
        8: 1102:      return __cur;
        8: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt4pairIyPKN5Catch8TestCaseEES6_SaIS5_EET0_T_S9_S8_RT1_:
function _ZSt14__relocate_a_1IPSt4pairIyPKN5Catch8TestCaseEES6_SaIS5_EET0_T_S9_S8_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt4pairIiN5Catch9StringRefEES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPSt4pairIiN5Catch9StringRefEES4_SaIS3_EET0_T_S7_S6_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch9StringRefES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPN5Catch9StringRefES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch5clara8TextFlow6Column8iteratorES5_SaIS4_EET0_T_S8_S7_RT1_:
function _ZSt14__relocate_a_1IPN5Catch5clara8TextFlow6Column8iteratorES5_SaIS4_EET0_T_S8_S7_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEESA_SaIS9_EET0_T_SD_SC_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEESA_SaIS9_EET0_T_SD_SC_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES8_SaIS7_EET0_T_SB_SA_RT1_:
function _ZSt14__relocate_a_1IPSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ES8_SaIS7_EET0_T_SB_SA_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPcN9__gnu_cxx17__normal_iteratorIS0_vEESaIcEET0_T_S6_S5_RT1_:
function _ZSt14__relocate_a_1IPcN9__gnu_cxx17__normal_iteratorIS0_vEESaIcEET0_T_S6_S5_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
call    0 never executed
    %%%%%: 1099-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt4pairIccES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPSt4pairIccES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPNSt7__cxx1112regex_traitsIcE10_RegexMaskES4_SaIS3_EET0_T_S7_S6_RT1_:
function _ZSt14__relocate_a_1IPNSt7__cxx1112regex_traitsIcE10_RegexMaskES4_SaIS3_EET0_T_S7_S6_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEESI_SaISH_EET0_T_SL_SK_RT1_:
function _ZSt14__relocate_a_1IPSt4pairIlSt6vectorINSt7__cxx119sub_matchIN9__gnu_cxx17__normal_iteratorIPKcNS2_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEESI_SaISH_EET0_T_SL_SK_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPNSt8__detail6_StateIcEES3_SaIS2_EET0_T_S6_S5_RT1_:
function _ZSt14__relocate_a_1IPNSt8__detail6_StateIcEES3_SaIS2_EET0_T_S6_S5_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPPN5Catch16TestCaseTracking8ITrackerEN9__gnu_cxx17__normal_iteratorIS4_vEESaIS3_EET0_T_SA_S9_RT1_:
function _ZSt14__relocate_a_1IPPN5Catch16TestCaseTracking8ITrackerEN9__gnu_cxx17__normal_iteratorIS4_vEESaIS3_EET0_T_SA_S9_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
call    0 never executed
    %%%%%: 1099-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EES6_SaIS5_EET0_T_S9_S8_RT1_:
function _ZSt14__relocate_a_1IPSt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS2_EES6_SaIS5_EET0_T_S9_S8_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEESC_SaISB_EET0_T_SF_SE_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEESC_SaISB_EET0_T_SF_SE_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEESE_SaISD_EET0_T_SH_SG_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEESE_SaISD_EET0_T_SH_SG_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEES7_SaIS6_EET0_T_SA_S9_RT1_:
function _ZSt14__relocate_a_1IPSt10shared_ptrIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEES7_SaIS6_EET0_T_SA_S9_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch13SummaryColumnES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPN5Catch13SummaryColumnES2_SaIS1_EET0_T_S5_S4_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPN5Catch11SectionInfoES2_SaIS1_EET0_T_S5_S4_RT1_:
function _ZSt14__relocate_a_1IPN5Catch11SectionInfoES2_SaIS1_EET0_T_S5_S4_RT1_ called 6 returned 100% blocks executed 100%
        6: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
        6: 1098:      _ForwardIterator __cur = __result;
        9: 1099:      for (; __first != __last; ++__first, (void)++__cur)
        6: 1099-block  0
        9: 1099-block  1
branch  0 taken 3
branch  1 taken 6 (fallthrough)
        3: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
        3: 1100-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -: 1101:				 std::__addressof(*__first), __alloc);
        6: 1102:      return __cur;
        6: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPPKN5Catch8TestCaseEN9__gnu_cxx17__normal_iteratorIS4_vEESaIS3_EET0_T_SA_S9_RT1_:
function _ZSt14__relocate_a_1IPPKN5Catch8TestCaseEN9__gnu_cxx17__normal_iteratorIS4_vEESaIS3_EET0_T_SA_S9_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
call    0 never executed
    %%%%%: 1099-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPyN9__gnu_cxx17__normal_iteratorIS0_vEESaIyEET0_T_S6_S5_RT1_:
function _ZSt14__relocate_a_1IPyN9__gnu_cxx17__normal_iteratorIS0_vEESaIyEET0_T_S6_S5_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
call    0 never executed
    %%%%%: 1099-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EESA_SaIS9_EET0_T_SD_SC_RT1_:
function _ZSt14__relocate_a_1IPSt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS6_EESA_SaIS9_EET0_T_SD_SC_RT1_ called 6 returned 100% blocks executed 100%
        6: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
        6: 1098:      _ForwardIterator __cur = __result;
        9: 1099:      for (; __first != __last; ++__first, (void)++__cur)
        6: 1099-block  0
        9: 1099-block  1
branch  0 taken 3
branch  1 taken 6 (fallthrough)
        3: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
        3: 1100-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        -: 1101:				 std::__addressof(*__first), __alloc);
        6: 1102:      return __cur;
        6: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPPN5Catch10ISingletonEN9__gnu_cxx17__normal_iteratorIS3_vEESaIS2_EET0_T_S9_S8_RT1_:
function _ZSt14__relocate_a_1IPPN5Catch10ISingletonEN9__gnu_cxx17__normal_iteratorIS3_vEESaIS2_EET0_T_S9_S8_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
call    0 never executed
    %%%%%: 1099-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
_ZSt14__relocate_a_1IPSt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EES7_SaIS6_EET0_T_SA_S9_RT1_:
function _ZSt14__relocate_a_1IPSt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS3_EES7_SaIS6_EET0_T_SA_S9_RT1_ called 0 returned 0% blocks executed 0%
    #####: 1086:    __relocate_a_1(_InputIterator __first, _InputIterator __last,
        -: 1087:		   _ForwardIterator __result, _Allocator& __alloc)
        -: 1088:    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
        -: 1089:					       std::addressof(*__first),
        -: 1090:					       __alloc)))
        -: 1091:    {
        -: 1092:      typedef typename iterator_traits<_InputIterator>::value_type
        -: 1093:	_ValueType;
        -: 1094:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -: 1095:	_ValueType2;
        -: 1096:      static_assert(std::is_same<_ValueType, _ValueType2>::value,
        -: 1097:	  "relocation is only possible for values of the same type");
    #####: 1098:      _ForwardIterator __cur = __result;
    #####: 1099:      for (; __first != __last; ++__first, (void)++__cur)
    %%%%%: 1099-block  0
    %%%%%: 1099-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1100:	std::__relocate_object_a(std::__addressof(*__cur),
    %%%%%: 1100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1101:				 std::__addressof(*__first), __alloc);
    #####: 1102:      return __cur;
    %%%%%: 1102-block  0
        -: 1103:    }
------------------
        -: 1104:
        -: 1105:#if _GLIBCXX_HOSTED
        -: 1106:  template <typename _Tp, typename _Up>
        -: 1107:    _GLIBCXX20_CONSTEXPR
        -: 1108:    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
      14*: 1109:    __relocate_a_1(_Tp* __first, _Tp* __last,
        -: 1110:		   _Tp* __result,
        -: 1111:		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
        -: 1112:    {
      14*: 1113:      ptrdiff_t __count = __last - __first;
      14*: 1114:      if (__count > 0)
        -: 1115:	{
        -: 1116:#ifdef __cpp_lib_is_constant_evaluated
       4*: 1117:	  if (std::is_constant_evaluated())
        -: 1118:	    {
        -: 1119:	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
        -: 1120:	      // resolves to the non-trivial overload above.
    #####: 1121:	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
    #####: 1122:	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
    #####: 1123:	      return ___out.base();
        -: 1124:	    }
        -: 1125:#endif
       4*: 1126:	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
        -: 1127:	}
      14*: 1128:      return __result + __count;
        -: 1129:    }
------------------
_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E:
function _ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E called 0 returned 0% blocks executed 0%
    #####: 1109:    __relocate_a_1(_Tp* __first, _Tp* __last,
        -: 1110:		   _Tp* __result,
        -: 1111:		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
        -: 1112:    {
    #####: 1113:      ptrdiff_t __count = __last - __first;
    #####: 1114:      if (__count > 0)
    %%%%%: 1114-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1115:	{
        -: 1116:#ifdef __cpp_lib_is_constant_evaluated
    #####: 1117:	  if (std::is_constant_evaluated())
    %%%%%: 1117-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1118:	    {
        -: 1119:	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
        -: 1120:	      // resolves to the non-trivial overload above.
    #####: 1121:	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
    %%%%%: 1121-block  0
call    0 never executed
    #####: 1122:	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
call    0 never executed
    #####: 1123:	      return ___out.base();
call    0 never executed
        -: 1124:	    }
        -: 1125:#endif
    #####: 1126:	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
    %%%%%: 1126-block  0
        -: 1127:	}
    #####: 1128:      return __result + __count;
    %%%%%: 1128-block  0
        -: 1129:    }
------------------
_ZSt14__relocate_a_1IPN5Catch16TestCaseTracking8ITrackerES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E:
function _ZSt14__relocate_a_1IPN5Catch16TestCaseTracking8ITrackerES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E called 4 returned 100% blocks executed 55%
        4: 1109:    __relocate_a_1(_Tp* __first, _Tp* __last,
        -: 1110:		   _Tp* __result,
        -: 1111:		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
        -: 1112:    {
        4: 1113:      ptrdiff_t __count = __last - __first;
        4: 1114:      if (__count > 0)
        4: 1114-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1115:	{
        -: 1116:#ifdef __cpp_lib_is_constant_evaluated
        1: 1117:	  if (std::is_constant_evaluated())
        1: 1117-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 1118:	    {
        -: 1119:	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
        -: 1120:	      // resolves to the non-trivial overload above.
    #####: 1121:	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
    %%%%%: 1121-block  0
call    0 never executed
    #####: 1122:	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
call    0 never executed
    #####: 1123:	      return ___out.base();
call    0 never executed
        -: 1124:	    }
        -: 1125:#endif
        1: 1126:	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
        1: 1126-block  0
        -: 1127:	}
        4: 1128:      return __result + __count;
        4: 1128-block  0
        -: 1129:    }
------------------
_ZSt14__relocate_a_1IPKN5Catch8TestCaseES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E:
function _ZSt14__relocate_a_1IPKN5Catch8TestCaseES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E called 0 returned 0% blocks executed 0%
    #####: 1109:    __relocate_a_1(_Tp* __first, _Tp* __last,
        -: 1110:		   _Tp* __result,
        -: 1111:		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
        -: 1112:    {
    #####: 1113:      ptrdiff_t __count = __last - __first;
    #####: 1114:      if (__count > 0)
    %%%%%: 1114-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1115:	{
        -: 1116:#ifdef __cpp_lib_is_constant_evaluated
    #####: 1117:	  if (std::is_constant_evaluated())
    %%%%%: 1117-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1118:	    {
        -: 1119:	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
        -: 1120:	      // resolves to the non-trivial overload above.
    #####: 1121:	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
    %%%%%: 1121-block  0
call    0 never executed
    #####: 1122:	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
call    0 never executed
    #####: 1123:	      return ___out.base();
call    0 never executed
        -: 1124:	    }
        -: 1125:#endif
    #####: 1126:	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
    %%%%%: 1126-block  0
        -: 1127:	}
    #####: 1128:      return __result + __count;
    %%%%%: 1128-block  0
        -: 1129:    }
------------------
_ZSt14__relocate_a_1IyyENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E:
function _ZSt14__relocate_a_1IyyENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E called 6 returned 100% blocks executed 55%
        6: 1109:    __relocate_a_1(_Tp* __first, _Tp* __last,
        -: 1110:		   _Tp* __result,
        -: 1111:		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
        -: 1112:    {
        6: 1113:      ptrdiff_t __count = __last - __first;
        6: 1114:      if (__count > 0)
        6: 1114-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        -: 1115:	{
        -: 1116:#ifdef __cpp_lib_is_constant_evaluated
        2: 1117:	  if (std::is_constant_evaluated())
        2: 1117-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -: 1118:	    {
        -: 1119:	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
        -: 1120:	      // resolves to the non-trivial overload above.
    #####: 1121:	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
    %%%%%: 1121-block  0
call    0 never executed
    #####: 1122:	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
call    0 never executed
    #####: 1123:	      return ___out.base();
call    0 never executed
        -: 1124:	    }
        -: 1125:#endif
        2: 1126:	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
        2: 1126-block  0
        -: 1127:	}
        6: 1128:      return __result + __count;
        6: 1128-block  0
        -: 1129:    }
------------------
_ZSt14__relocate_a_1IPN5Catch10ISingletonES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E:
function _ZSt14__relocate_a_1IPN5Catch10ISingletonES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E called 4 returned 100% blocks executed 55%
        4: 1109:    __relocate_a_1(_Tp* __first, _Tp* __last,
        -: 1110:		   _Tp* __result,
        -: 1111:		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
        -: 1112:    {
        4: 1113:      ptrdiff_t __count = __last - __first;
        4: 1114:      if (__count > 0)
        4: 1114-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1115:	{
        -: 1116:#ifdef __cpp_lib_is_constant_evaluated
        1: 1117:	  if (std::is_constant_evaluated())
        1: 1117-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 1118:	    {
        -: 1119:	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
        -: 1120:	      // resolves to the non-trivial overload above.
    #####: 1121:	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
    %%%%%: 1121-block  0
call    0 never executed
    #####: 1122:	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
call    0 never executed
    #####: 1123:	      return ___out.base();
call    0 never executed
        -: 1124:	    }
        -: 1125:#endif
        1: 1126:	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
        1: 1126-block  0
        -: 1127:	}
        4: 1128:      return __result + __count;
        4: 1128-block  0
        -: 1129:    }
------------------
        -: 1130:#endif
        -: 1131:
        -: 1132:  template <typename _InputIterator, typename _ForwardIterator,
        -: 1133:	    typename _Allocator>
        -: 1134:    _GLIBCXX20_CONSTEXPR
        -: 1135:    inline _ForwardIterator
     672*: 1136:    __relocate_a(_InputIterator __first, _InputIterator __last,
        -: 1137:		 _ForwardIterator __result, _Allocator& __alloc)
        -: 1138:    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
        -: 1139:				     std::__niter_base(__last),
        -: 1140:				     std::__niter_base(__result), __alloc)))
        -: 1141:    {
     672*: 1142:      return std::__relocate_a_1(std::__niter_base(__first),
        -: 1143:				 std::__niter_base(__last),
     672*: 1144:				 std::__niter_base(__result), __alloc);
        -: 1145:    }
        -: 1146:
        -: 1147:  /// @endcond
        -: 1148:#endif // C++11
        -: 1149:
        -: 1150:  /// @} group memory
        -: 1151:
        -: 1152:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1153:} // namespace
        -: 1154:
        -: 1155:#endif /* _STL_UNINITIALIZED_H */
